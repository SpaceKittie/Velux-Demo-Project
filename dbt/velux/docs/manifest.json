{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.6", "generated_at": "2025-06-02T15:15:56.934624Z", "invocation_id": "51bbdcc4-5bb6-4073-88b2-6cecac01f52f", "env": {}, "project_name": "velux", "project_id": "a690596f618570b93e87a1ca6ccdde68", "user_id": "2e962224-c010-4569-9a17-3d8223b9dfb0", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.velux.stg_accuweather_hourly": {"database": "VELUX_DEV", "schema": "STAGING", "name": "stg_accuweather_hourly", "resource_type": "model", "package_name": "velux", "path": "staging\\accuweather\\stg_accuweather_hourly.sql", "original_file_path": "models\\staging\\accuweather\\stg_accuweather_hourly.sql", "unique_id": "model.velux.stg_accuweather_hourly", "fqn": ["velux", "staging", "accuweather", "stg_accuweather_hourly"], "alias": "stg_accuweather_hourly", "checksum": {"name": "sha256", "checksum": "38cc53cb415ce0796d54a2557d3e39db00dd1a0649ffe5926c762cb7a70609f6"}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["staging"], "description": "Stages hourly weather data from AccuWeather Snowflake Marketplace source, providing weather metrics for various cities.", "columns": {"weather_timestamp": {"name": "weather_timestamp", "description": "Timestamp of the weather reading.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "city_name": {"name": "city_name", "description": "Name of the city for the weather reading.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "country_code": {"name": "country_code", "description": "Country code for weather reading.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "outdoor_temperature_celsius": {"name": "outdoor_temperature_celsius", "description": "Outdoor temperature in Celsius.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dew_point_temperature_celsius": {"name": "dew_point_temperature_celsius", "description": "Dew point temperature in Celsius.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "mean_sea_level_pressure_hpa": {"name": "mean_sea_level_pressure_hpa", "description": "Mean sea level pressure in hPa.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "wind_speed_ms": {"name": "wind_speed_ms", "description": "Wind speed in meters per second.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "visibility_km": {"name": "visibility_km", "description": "Visibility in kilometers.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "solar_irradiance_w_m2": {"name": "solar_irradiance_w_m2", "description": "Solar irradiance in Watts per square meter.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "uv_index": {"name": "uv_index", "description": "UV index.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sunshine_duration_minutes": {"name": "sunshine_duration_minutes", "description": "Duration of sunshine in minutes.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "precipitation_type_description": {"name": "precipitation_type_description", "description": "Description of precipitation type.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\staging\\staging.yml", "build_path": null, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "schema": "STAGING", "contract": {"enforced": true}, "tags": ["staging"]}, "created_at": 1748873075.0530107, "relation_name": "VELUX_DEV.STAGING.stg_accuweather_hourly", "raw_code": "{{ config(tags=['staging']) }}\n\n\nWITH source_data AS (\n    SELECT * FROM {{ source('accuweather', 'TOP_CITY_HOURLY_METRIC') }}\n)\nSELECT\n    DATETIME AS weather_timestamp,\n    CITY_NAME AS city_name,\n    COUNTRY_CODE AS country_code,\n    TEMPERATURE::FLOAT AS outdoor_temperature_celsius,           \n    TEMPERATURE_DEW_POINT::FLOAT AS dew_point_temperature_celsius, \n    PRESSURE_MSL::FLOAT AS mean_sea_level_pressure_hpa,          \n    WIND_SPEED::FLOAT AS wind_speed_ms,                                                             \n    VISIBILITY::FLOAT AS visibility_km,                            \n    SOLAR_IRRADIANCE::FLOAT AS solar_irradiance_w_m2,              \n    INDEX_UV::FLOAT AS uv_index,\n    MINUTES_OF_SUN::FLOAT AS sunshine_duration_minutes,\n    PRECIPITATION_TYPE_DESC AS precipitation_type_description\n\nFROM source_data", "language": "sql", "refs": [], "sources": [["accuweather", "TOP_CITY_HOURLY_METRIC"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.velux.accuweather.TOP_CITY_HOURLY_METRIC"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\accuweather\\stg_accuweather_hourly.sql", "compiled": true, "compiled_code": "\n\n\nWITH source_data AS (\n    SELECT * FROM SAMPLE_OF_ACCUWEATHERS_HISTORICAL_WEATHER_DATA.HISTORICAL.TOP_CITY_HOURLY_METRIC\n)\nSELECT\n    DATETIME AS weather_timestamp,\n    CITY_NAME AS city_name,\n    COUNTRY_CODE AS country_code,\n    TEMPERATURE::FLOAT AS outdoor_temperature_celsius,           \n    TEMPERATURE_DEW_POINT::FLOAT AS dew_point_temperature_celsius, \n    PRESSURE_MSL::FLOAT AS mean_sea_level_pressure_hpa,          \n    WIND_SPEED::FLOAT AS wind_speed_ms,                                                             \n    VISIBILITY::FLOAT AS visibility_km,                            \n    SOLAR_IRRADIANCE::FLOAT AS solar_irradiance_w_m2,              \n    INDEX_UV::FLOAT AS uv_index,\n    MINUTES_OF_SUN::FLOAT AS sunshine_duration_minutes,\n    PRECIPITATION_TYPE_DESC AS precipitation_type_description\n\nFROM source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "bd14b2784bd2265b2e61064fe5940e72f6cf8e3464e48b862ca073a6ea2b4907"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["city_name", "country_code", "weather_timestamp"], "time_spine": null}, "model.velux.stg_iot_data": {"database": "VELUX_DEV", "schema": "STAGING", "name": "stg_iot_data", "resource_type": "model", "package_name": "velux", "path": "staging\\iot_data\\stg_iot_data.sql", "original_file_path": "models\\staging\\iot_data\\stg_iot_data.sql", "unique_id": "model.velux.stg_iot_data", "fqn": ["velux", "staging", "iot_data", "stg_iot_data"], "alias": "stg_iot_data", "checksum": {"name": "sha256", "checksum": "f67ac82c488600520515a4c5ec4b80c9ecf9954f88cfd2c2edba07bce00593d4"}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["staging"], "description": "Stages raw IoT sensor data, providing various readings per device and timestamp. This model represents the wide format of the source data.", "columns": {"event_timestamp": {"name": "event_timestamp", "description": "Timestamp of the IoT sensor reading.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country where the IoT device is located.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "city": {"name": "city", "description": "City where the IoT device is located.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "Unique identifier for the IoT device.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "co2_bedroom_ppm": {"name": "co2_bedroom_ppm", "description": "CO2 level in bedroom (parts per million).", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "co2_kitchen_ppm": {"name": "co2_kitchen_ppm", "description": "CO2 level in kitchen (parts per million).", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "rh_bedroom_pct": {"name": "rh_bedroom_pct", "description": "Relative humidity in bedroom (percentage).", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "rh_kitchen_pct": {"name": "rh_kitchen_pct", "description": "Relative humidity in kitchen (percentage).", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "rh_outdoor_pct": {"name": "rh_outdoor_pct", "description": "Outdoor relative humidity (percentage).", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "indoor_temperature_c": {"name": "indoor_temperature_c", "description": "Indoor temperature (Celsius).", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "outdoor_temperature_c": {"name": "outdoor_temperature_c", "description": "Outdoor temperature (Celsius) reported by IoT device.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\staging\\staging.yml", "build_path": null, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}, "schema": "STAGING", "contract": {"enforced": true}, "tags": ["staging"]}, "created_at": 1748873075.057145, "relation_name": "VELUX_DEV.STAGING.stg_iot_data", "raw_code": "{{ config(tags=['staging']) }}\n\n\nwith source_data as (\n    select *\n    from {{ source('iot_data', 'iot_data') }}\n)\n\nselect\n    datetime::timestamp_ntz as event_timestamp,\n    country::varchar as country,\n    city::varchar as city,\n    device_id::varchar as device_id,\n    co2_bedroom_ppm::float as co2_bedroom_ppm,\n    co2_kitchen_ppm::float as co2_kitchen_ppm,\n    rh_bedroom_pct::float as rh_bedroom_pct,\n    rh_kitchen_pct::float as rh_kitchen_pct,\n    rh_outdoor_pct::float as rh_outdoor_pct,\n    indoor_temperature_c::float as indoor_temperature_c,\n    outdoor_temperature_c::float as outdoor_temperature_c\n\nfrom source_data", "language": "sql", "refs": [], "sources": [["iot_data", "iot_data"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.velux.iot_data.iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\iot_data\\stg_iot_data.sql", "compiled": true, "compiled_code": "\n\n\nwith source_data as (\n    select *\n    from velux_dev.raw.iot_data\n)\n\nselect\n    datetime::timestamp_ntz as event_timestamp,\n    country::varchar as country,\n    city::varchar as city,\n    device_id::varchar as device_id,\n    co2_bedroom_ppm::float as co2_bedroom_ppm,\n    co2_kitchen_ppm::float as co2_kitchen_ppm,\n    rh_bedroom_pct::float as rh_bedroom_pct,\n    rh_kitchen_pct::float as rh_kitchen_pct,\n    rh_outdoor_pct::float as rh_outdoor_pct,\n    indoor_temperature_c::float as indoor_temperature_c,\n    outdoor_temperature_c::float as outdoor_temperature_c\n\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "8ca55c36529662ba077951031006fcfdd906bd421fc215b25a0848f0332d945f"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["device_id", "event_timestamp"], "time_spine": null}, "test.velux.not_null_stg_accuweather_hourly_weather_timestamp.70cb22ff57": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_accuweather_hourly_weather_timestamp", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_accuweather_hourly_weather_timestamp.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_accuweather_hourly_weather_timestamp.70cb22ff57", "fqn": ["velux", "staging", "not_null_stg_accuweather_hourly_weather_timestamp"], "alias": "not_null_stg_accuweather_hourly_weather_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.0581794, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_accuweather_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_accuweather_hourly"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_accuweather_hourly_weather_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect weather_timestamp\nfrom VELUX_DEV.STAGING.stg_accuweather_hourly\nwhere weather_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weather_timestamp", "file_key_name": "models.stg_accuweather_hourly", "attached_node": "model.velux.stg_accuweather_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "weather_timestamp", "model": "{{ get_where_subquery(ref('stg_accuweather_hourly')) }}"}, "namespace": null}}, "test.velux.not_null_stg_accuweather_hourly_city_name.20318c53f2": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_accuweather_hourly_city_name", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_accuweather_hourly_city_name.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_accuweather_hourly_city_name.20318c53f2", "fqn": ["velux", "staging", "not_null_stg_accuweather_hourly_city_name"], "alias": "not_null_stg_accuweather_hourly_city_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.0592136, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_accuweather_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_accuweather_hourly"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_accuweather_hourly_city_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city_name\nfrom VELUX_DEV.STAGING.stg_accuweather_hourly\nwhere city_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_name", "file_key_name": "models.stg_accuweather_hourly", "attached_node": "model.velux.stg_accuweather_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city_name", "model": "{{ get_where_subquery(ref('stg_accuweather_hourly')) }}"}, "namespace": null}}, "test.velux.not_null_stg_accuweather_hourly_country_code.fc4c53b85d": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_accuweather_hourly_country_code", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_accuweather_hourly_country_code.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_accuweather_hourly_country_code.fc4c53b85d", "fqn": ["velux", "staging", "not_null_stg_accuweather_hourly_country_code"], "alias": "not_null_stg_accuweather_hourly_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.0612137, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_accuweather_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_accuweather_hourly"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_accuweather_hourly_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom VELUX_DEV.STAGING.stg_accuweather_hourly\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.stg_accuweather_hourly", "attached_node": "model.velux.stg_accuweather_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('stg_accuweather_hourly')) }}"}, "namespace": null}}, "test.velux.dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code.1e0eb90a13": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code", "resource_type": "test", "package_name": "velux", "path": "dbt_utils_unique_combination_o_14286ddc61fc9dc69b6de2de817e2706.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code.1e0eb90a13", "fqn": ["velux", "staging", "dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code"], "alias": "dbt_utils_unique_combination_o_14286ddc61fc9dc69b6de2de817e2706", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_14286ddc61fc9dc69b6de2de817e2706", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_14286ddc61fc9dc69b6de2de817e2706"}, "created_at": 1748873075.0633435, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_14286ddc61fc9dc69b6de2de817e2706\") }}", "language": "sql", "refs": [{"name": "stg_accuweather_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_accuweather_hourly"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\dbt_utils_unique_combination_o_14286ddc61fc9dc69b6de2de817e2706.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        weather_timestamp, city_name, country_code\n    from VELUX_DEV.STAGING.stg_accuweather_hourly\n    group by weather_timestamp, city_name, country_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_accuweather_hourly", "attached_node": "model.velux.stg_accuweather_hourly", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["weather_timestamp", "city_name", "country_code"], "model": "{{ get_where_subquery(ref('stg_accuweather_hourly')) }}"}, "namespace": "dbt_utils"}}, "test.velux.not_null_stg_iot_data_event_timestamp.f9de5c6aa7": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_iot_data_event_timestamp", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_iot_data_event_timestamp.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_iot_data_event_timestamp.f9de5c6aa7", "fqn": ["velux", "staging", "not_null_stg_iot_data_event_timestamp"], "alias": "not_null_stg_iot_data_event_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.0653803, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_iot_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_iot_data_event_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom VELUX_DEV.STAGING.stg_iot_data\nwhere event_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_timestamp", "file_key_name": "models.stg_iot_data", "attached_node": "model.velux.stg_iot_data", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_timestamp", "model": "{{ get_where_subquery(ref('stg_iot_data')) }}"}, "namespace": null}}, "test.velux.not_null_stg_iot_data_country.8a419ce412": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_iot_data_country", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_iot_data_country.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_iot_data_country.8a419ce412", "fqn": ["velux", "staging", "not_null_stg_iot_data_country"], "alias": "not_null_stg_iot_data_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.0679202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_iot_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_iot_data_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom VELUX_DEV.STAGING.stg_iot_data\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.stg_iot_data", "attached_node": "model.velux.stg_iot_data", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('stg_iot_data')) }}"}, "namespace": null}}, "test.velux.not_null_stg_iot_data_city.ec8f0b979f": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_iot_data_city", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_iot_data_city.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_iot_data_city.ec8f0b979f", "fqn": ["velux", "staging", "not_null_stg_iot_data_city"], "alias": "not_null_stg_iot_data_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.069458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_iot_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_iot_data_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom VELUX_DEV.STAGING.stg_iot_data\nwhere city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city", "file_key_name": "models.stg_iot_data", "attached_node": "model.velux.stg_iot_data", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(ref('stg_iot_data')) }}"}, "namespace": null}}, "test.velux.not_null_stg_iot_data_device_id.7a15007b23": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_stg_iot_data_device_id", "resource_type": "test", "package_name": "velux", "path": "not_null_stg_iot_data_device_id.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.not_null_stg_iot_data_device_id.7a15007b23", "fqn": ["velux", "staging", "not_null_stg_iot_data_device_id"], "alias": "not_null_stg_iot_data_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873075.0704932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_iot_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\not_null_stg_iot_data_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom VELUX_DEV.STAGING.stg_iot_data\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.stg_iot_data", "attached_node": "model.velux.stg_iot_data", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('stg_iot_data')) }}"}, "namespace": null}}, "test.velux.dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id.e52fe9fcb8": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id", "resource_type": "test", "package_name": "velux", "path": "dbt_utils_unique_combination_o_e99b484c61a8a14920ac4a5460087e23.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.velux.dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id.e52fe9fcb8", "fqn": ["velux", "staging", "dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id"], "alias": "dbt_utils_unique_combination_o_e99b484c61a8a14920ac4a5460087e23", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e99b484c61a8a14920ac4a5460087e23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e99b484c61a8a14920ac4a5460087e23"}, "created_at": 1748873075.0724924, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e99b484c61a8a14920ac4a5460087e23\") }}", "language": "sql", "refs": [{"name": "stg_iot_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.stg_iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\staging\\staging.yml\\dbt_utils_unique_combination_o_e99b484c61a8a14920ac4a5460087e23.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_timestamp, device_id\n    from VELUX_DEV.STAGING.stg_iot_data\n    group by event_timestamp, device_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_iot_data", "attached_node": "model.velux.stg_iot_data", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_timestamp", "device_id"], "model": "{{ get_where_subquery(ref('stg_iot_data')) }}"}, "namespace": "dbt_utils"}}, "model.velux.int_iot_data_with_weather": {"database": "VELUX_DEV", "schema": "STAGING", "name": "int_iot_data_with_weather", "resource_type": "model", "package_name": "velux", "path": "intermediate\\int_iot_data_with_weather.sql", "original_file_path": "models\\intermediate\\int_iot_data_with_weather.sql", "unique_id": "model.velux.int_iot_data_with_weather", "fqn": ["velux", "intermediate", "int_iot_data_with_weather"], "alias": "int_iot_data_with_weather", "checksum": {"name": "sha256", "checksum": "14b42d3a31ced643b6f1a5f23bdd9ed94a1331aa91003aee789a43025b1cf85c"}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["intermediate"], "description": "Enriches unpivotted IoT sensor data with corresponding hourly weather information based on location and time.", "columns": {"event_timestamp": {"name": "event_timestamp", "description": "Timestamp of the IoT sensor reading.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country where the IoT device is located.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "city": {"name": "city", "description": "City where the IoT device is located.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "Unique identifier for the IoT device.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "room": {"name": "room", "description": "Room associated with the sensor reading.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_type": {"name": "sensor_type", "description": "Type of sensor and its unit.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_value": {"name": "sensor_value", "description": "The actual value recorded by the sensor.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "outdoor_temperature_celsius": {"name": "outdoor_temperature_celsius", "description": "Outdoor temperature in Celsius from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dew_point_temperature_celsius": {"name": "dew_point_temperature_celsius", "description": "Dew point temperature in Celsius from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "mean_sea_level_pressure_hpa": {"name": "mean_sea_level_pressure_hpa", "description": "Mean sea level pressure in hPa from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "wind_speed_ms": {"name": "wind_speed_ms", "description": "Wind speed in m/s from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "visibility_km": {"name": "visibility_km", "description": "Visibility in km from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "solar_irradiance_w_m2": {"name": "solar_irradiance_w_m2", "description": "Solar irradiance in W/m2 from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "uv_index": {"name": "uv_index", "description": "UV index from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sunshine_duration_minutes": {"name": "sunshine_duration_minutes", "description": "Sunshine duration in minutes from weather data.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "precipitation_type_description": {"name": "precipitation_type_description", "description": "Precipitation type from weather data.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\intermediate\\intermediate.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "STAGING", "contract": {"enforced": true}, "tags": ["intermediate"]}, "created_at": 1748873239.9594524, "relation_name": "VELUX_DEV.STAGING.int_iot_data_with_weather", "raw_code": "{{ config(tags=['intermediate']) }}\n\nWITH iot_unpivotted_data AS (\n    SELECT\n        event_timestamp,\n        country,\n        city,\n        device_id,\n        room,\n        sensor_type,\n        sensor_value\n    FROM {{ ref('int_iot_data_unpivotted') }}\n),\n\nstaged_weather_data AS (\n    SELECT\n        weather_timestamp,\n        city_name,\n        country_code,\n        outdoor_temperature_celsius,\n        dew_point_temperature_celsius,\n        mean_sea_level_pressure_hpa,\n        wind_speed_ms,\n        visibility_km,\n        solar_irradiance_w_m2,\n        uv_index,\n        sunshine_duration_minutes,\n        precipitation_type_description\n    FROM {{ ref('stg_accuweather_hourly') }}\n)\nSELECT\n    iot_unpivotted_data.event_timestamp,\n    iot_unpivotted_data.country,\n    iot_unpivotted_data.city,      \n    iot_unpivotted_data.device_id,\n    iot_unpivotted_data.room,\n    iot_unpivotted_data.sensor_type,\n    iot_unpivotted_data.sensor_value,\n\n    staged_weather_data.outdoor_temperature_celsius,\n    staged_weather_data.dew_point_temperature_celsius,\n    staged_weather_data.mean_sea_level_pressure_hpa,\n    staged_weather_data.wind_speed_ms,\n    staged_weather_data.visibility_km,\n    staged_weather_data.solar_irradiance_w_m2,\n    staged_weather_data.uv_index,\n    staged_weather_data.sunshine_duration_minutes,\n    staged_weather_data.precipitation_type_description\n\nFROM iot_unpivotted_data\nLEFT JOIN staged_weather_data\n    ON iot_unpivotted_data.city = staged_weather_data.city_name\n    AND iot_unpivotted_data.event_timestamp = staged_weather_data.weather_timestamp\n    AND iot_unpivotted_data.country = staged_weather_data.country_code", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}, {"name": "stg_accuweather_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.velux.int_iot_data_unpivotted", "model.velux.stg_accuweather_hourly"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\int_iot_data_with_weather.sql", "compiled": true, "compiled_code": "\n\nWITH iot_unpivotted_data AS (\n    SELECT\n        event_timestamp,\n        country,\n        city,\n        device_id,\n        room,\n        sensor_type,\n        sensor_value\n    FROM VELUX_DEV.STAGING.int_iot_data_unpivotted\n),\n\nstaged_weather_data AS (\n    SELECT\n        weather_timestamp,\n        city_name,\n        country_code,\n        outdoor_temperature_celsius,\n        dew_point_temperature_celsius,\n        mean_sea_level_pressure_hpa,\n        wind_speed_ms,\n        visibility_km,\n        solar_irradiance_w_m2,\n        uv_index,\n        sunshine_duration_minutes,\n        precipitation_type_description\n    FROM VELUX_DEV.STAGING.stg_accuweather_hourly\n)\nSELECT\n    iot_unpivotted_data.event_timestamp,\n    iot_unpivotted_data.country,\n    iot_unpivotted_data.city,      \n    iot_unpivotted_data.device_id,\n    iot_unpivotted_data.room,\n    iot_unpivotted_data.sensor_type,\n    iot_unpivotted_data.sensor_value,\n\n    staged_weather_data.outdoor_temperature_celsius,\n    staged_weather_data.dew_point_temperature_celsius,\n    staged_weather_data.mean_sea_level_pressure_hpa,\n    staged_weather_data.wind_speed_ms,\n    staged_weather_data.visibility_km,\n    staged_weather_data.solar_irradiance_w_m2,\n    staged_weather_data.uv_index,\n    staged_weather_data.sunshine_duration_minutes,\n    staged_weather_data.precipitation_type_description\n\nFROM iot_unpivotted_data\nLEFT JOIN staged_weather_data\n    ON iot_unpivotted_data.city = staged_weather_data.city_name\n    AND iot_unpivotted_data.event_timestamp = staged_weather_data.weather_timestamp\n    AND iot_unpivotted_data.country = staged_weather_data.country_code", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "44fc8feb6a9660648beb0c5f4bc3582ea89f97d4739317d4cc69764efac01159"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["device_id", "event_timestamp", "room", "sensor_type"], "time_spine": null}, "model.velux.int_iot_data_unpivotted": {"database": "VELUX_DEV", "schema": "STAGING", "name": "int_iot_data_unpivotted", "resource_type": "model", "package_name": "velux", "path": "intermediate\\int_iot_data_unpivotted.sql", "original_file_path": "models\\intermediate\\int_iot_data_unpivotted.sql", "unique_id": "model.velux.int_iot_data_unpivotted", "fqn": ["velux", "intermediate", "int_iot_data_unpivotted"], "alias": "int_iot_data_unpivotted", "checksum": {"name": "sha256", "checksum": "1fa03ff358527fdc42534257a91caf7961553cac6d5aab73a6090c52bb1a884a"}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["intermediate"], "description": "Transforms wide-format IoT data into a long format, with one row per sensor reading. Classifies room and sensor type.", "columns": {"event_timestamp": {"name": "event_timestamp", "description": "Timestamp of the IoT sensor reading.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Country where the IoT device is located.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "city": {"name": "city", "description": "City where the IoT device is located.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "Unique identifier for the IoT device.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "room": {"name": "room", "description": "Room associated with the sensor reading (e.g., bedroom, kitchen, outdoor).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_type": {"name": "sensor_type", "description": "Type of sensor (e.g., co2, relative_humidity, temperature) and its unit.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_value": {"name": "sensor_value", "description": "The actual value recorded by the sensor.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\intermediate\\intermediate.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "STAGING", "contract": {"enforced": true}, "tags": ["intermediate"]}, "created_at": 1748873239.9614522, "relation_name": "VELUX_DEV.STAGING.int_iot_data_unpivotted", "raw_code": "{{ config(tags=['intermediate']) }}\n\nWITH base AS (\n    SELECT\n        event_timestamp,\n        country,\n        city,\n        device_id,\n        co2_bedroom_ppm,\n        co2_kitchen_ppm,\n        rh_bedroom_pct,\n        rh_kitchen_pct,\n        rh_outdoor_pct,\n        indoor_temperature_c,\n        outdoor_temperature_c\n    FROM {{ ref('stg_iot_data') }}\n),\n\nunpivoted AS (\n    {{ dbt_utils.unpivot(\n        relation       = ref('stg_iot_data'),\n        cast_to        = 'float',\n        exclude        = ['event_timestamp', 'device_id', 'country', 'city'],\n        field_name     = 'sensor_name',\n        value_name     = 'sensor_value'\n    ) }}\n),\n\nclassified AS (\n    SELECT\n        event_timestamp,\n        country,\n        city,\n        device_id,\n        CASE\n            WHEN lower(sensor_name) ilike 'co2_bedroom%' THEN 'bedroom'\n            WHEN lower(sensor_name) ilike 'co2_kitchen%' THEN 'kitchen'\n            WHEN lower(sensor_name) ilike 'rh_bedroom%' THEN 'bedroom'\n            WHEN lower(sensor_name) ilike 'rh_kitchen%' THEN 'kitchen'\n            WHEN lower(sensor_name) ilike 'rh_outdoor%' THEN 'outdoor'\n            WHEN lower(sensor_name) = 'indoor_temperature_c' THEN 'indoor'\n            WHEN lower(sensor_name) = 'outdoor_temperature_c' THEN 'outdoor'\n            ELSE 'unknown'\n        END AS room,\n        CASE\n            WHEN lower(sensor_name) ilike 'co2_%' THEN 'co2(parts per million)'\n            WHEN lower(sensor_name) ilike 'rh_%' THEN 'relative_humidity(percent)'\n            WHEN lower(sensor_name) ilike '%temperature_c' THEN 'temperature(celsius)'\n            ELSE 'unknown'\n        END AS sensor_type,\n        sensor_value\n    FROM unpivoted\n    WHERE sensor_value IS NOT NULL\n)\n\nSELECT\n  event_timestamp,\n  country,\n  city,\n  device_id,\n  room,\n  sensor_type,\n  sensor_value\nFROM classified", "language": "sql", "refs": [{"name": "stg_iot_data", "package": null, "version": null}, {"name": "stg_iot_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.unpivot"], "nodes": ["model.velux.stg_iot_data"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\int_iot_data_unpivotted.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n    SELECT\n        event_timestamp,\n        country,\n        city,\n        device_id,\n        co2_bedroom_ppm,\n        co2_kitchen_ppm,\n        rh_bedroom_pct,\n        rh_kitchen_pct,\n        rh_outdoor_pct,\n        indoor_temperature_c,\n        outdoor_temperature_c\n    FROM VELUX_DEV.STAGING.stg_iot_data\n),\n\nunpivoted AS (\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('CO2_BEDROOM_PPM' as TEXT) as sensor_name,\n      cast(  \n           CO2_BEDROOM_PPM\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    union all\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('CO2_KITCHEN_PPM' as TEXT) as sensor_name,\n      cast(  \n           CO2_KITCHEN_PPM\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    union all\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('RH_BEDROOM_PCT' as TEXT) as sensor_name,\n      cast(  \n           RH_BEDROOM_PCT\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    union all\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('RH_KITCHEN_PCT' as TEXT) as sensor_name,\n      cast(  \n           RH_KITCHEN_PCT\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    union all\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('RH_OUTDOOR_PCT' as TEXT) as sensor_name,\n      cast(  \n           RH_OUTDOOR_PCT\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    union all\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('INDOOR_TEMPERATURE_C' as TEXT) as sensor_name,\n      cast(  \n           INDOOR_TEMPERATURE_C\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    union all\n    select\n        event_timestamp,\n        device_id,\n        country,\n        city,\n\n      cast('OUTDOOR_TEMPERATURE_C' as TEXT) as sensor_name,\n      cast(  \n           OUTDOOR_TEMPERATURE_C\n             \n           as float) as sensor_value\n\n    from VELUX_DEV.STAGING.stg_iot_data\n\n    \n),\n\nclassified AS (\n    SELECT\n        event_timestamp,\n        country,\n        city,\n        device_id,\n        CASE\n            WHEN lower(sensor_name) ilike 'co2_bedroom%' THEN 'bedroom'\n            WHEN lower(sensor_name) ilike 'co2_kitchen%' THEN 'kitchen'\n            WHEN lower(sensor_name) ilike 'rh_bedroom%' THEN 'bedroom'\n            WHEN lower(sensor_name) ilike 'rh_kitchen%' THEN 'kitchen'\n            WHEN lower(sensor_name) ilike 'rh_outdoor%' THEN 'outdoor'\n            WHEN lower(sensor_name) = 'indoor_temperature_c' THEN 'indoor'\n            WHEN lower(sensor_name) = 'outdoor_temperature_c' THEN 'outdoor'\n            ELSE 'unknown'\n        END AS room,\n        CASE\n            WHEN lower(sensor_name) ilike 'co2_%' THEN 'co2(parts per million)'\n            WHEN lower(sensor_name) ilike 'rh_%' THEN 'relative_humidity(percent)'\n            WHEN lower(sensor_name) ilike '%temperature_c' THEN 'temperature(celsius)'\n            ELSE 'unknown'\n        END AS sensor_type,\n        sensor_value\n    FROM unpivoted\n    WHERE sensor_value IS NOT NULL\n)\n\nSELECT\n  event_timestamp,\n  country,\n  city,\n  device_id,\n  room,\n  sensor_type,\n  sensor_value\nFROM classified", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "c386c1536c2e5b6de43a78ce187a49f43319b2a28ac513dd95ddd5561203da5d"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["device_id", "event_timestamp", "room", "sensor_type"], "time_spine": null}, "test.velux.not_null_int_iot_data_with_weather_event_timestamp.3f98ff7746": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_event_timestamp", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_event_timestamp.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_event_timestamp.3f98ff7746", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_event_timestamp"], "alias": "not_null_int_iot_data_with_weather_event_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.0772533, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_event_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere event_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_timestamp", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_timestamp", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_with_weather_country.25a8549049": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_country", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_country.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_country.25a8549049", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_country"], "alias": "not_null_int_iot_data_with_weather_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.079378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_with_weather_city.6b64d45411": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_city", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_city.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_city.6b64d45411", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_city"], "alias": "not_null_int_iot_data_with_weather_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.0803893, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_with_weather_device_id.aa61cfac82": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_device_id", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_device_id.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_device_id.aa61cfac82", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_device_id"], "alias": "not_null_int_iot_data_with_weather_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.0824409, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_with_weather_room.514eb700a8": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_room", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_room.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_room.514eb700a8", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_room"], "alias": "not_null_int_iot_data_with_weather_room", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.0838866, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_room.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect room\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere room is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "room", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "room", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_with_weather_sensor_type.05578b68ad": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_sensor_type", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_sensor_type.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_sensor_type.05578b68ad", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_sensor_type"], "alias": "not_null_int_iot_data_with_weather_sensor_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.084521, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_sensor_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_type\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere sensor_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_type", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_type", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_with_weather_sensor_value.6e05d41e5b": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_with_weather_sensor_value", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_with_weather_sensor_value.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_with_weather_sensor_value.6e05d41e5b", "fqn": ["velux", "intermediate", "not_null_int_iot_data_with_weather_sensor_value"], "alias": "not_null_int_iot_data_with_weather_sensor_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.0870185, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_with_weather_sensor_value.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_value\nfrom VELUX_DEV.STAGING.int_iot_data_with_weather\nwhere sensor_value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_value", "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_value", "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": null}}, "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type.c1e221b8b2": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type", "resource_type": "test", "package_name": "velux", "path": "dbt_utils_unique_combination_o_71ebc83163fa53410c2711036af0191f.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type.c1e221b8b2", "fqn": ["velux", "intermediate", "dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type"], "alias": "dbt_utils_unique_combination_o_71ebc83163fa53410c2711036af0191f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_71ebc83163fa53410c2711036af0191f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_71ebc83163fa53410c2711036af0191f"}, "created_at": 1748873240.0880232, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_71ebc83163fa53410c2711036af0191f\") }}", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\dbt_utils_unique_combination_o_71ebc83163fa53410c2711036af0191f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_timestamp, device_id, room, sensor_type\n    from VELUX_DEV.STAGING.int_iot_data_with_weather\n    group by event_timestamp, device_id, room, sensor_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_iot_data_with_weather", "attached_node": "model.velux.int_iot_data_with_weather", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_timestamp", "device_id", "room", "sensor_type"], "model": "{{ get_where_subquery(ref('int_iot_data_with_weather')) }}"}, "namespace": "dbt_utils"}}, "test.velux.not_null_int_iot_data_unpivotted_event_timestamp.ba8cd711d9": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_event_timestamp", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_event_timestamp.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_event_timestamp.ba8cd711d9", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_event_timestamp"], "alias": "not_null_int_iot_data_unpivotted_event_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.106828, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_event_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere event_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_timestamp", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_timestamp", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_unpivotted_country.903cdf6125": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_country", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_country.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_country.903cdf6125", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_country"], "alias": "not_null_int_iot_data_unpivotted_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.1087048, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_unpivotted_city.e089e346c0": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_city", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_city.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_city.e089e346c0", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_city"], "alias": "not_null_int_iot_data_unpivotted_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.1097047, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_unpivotted_device_id.522d828ef9": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_device_id", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_device_id.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_device_id.522d828ef9", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_device_id"], "alias": "not_null_int_iot_data_unpivotted_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.1107068, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_unpivotted_room.81de36354d": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_room", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_room.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_room.81de36354d", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_room"], "alias": "not_null_int_iot_data_unpivotted_room", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.1127048, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_room.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect room\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere room is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "room", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "room", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_unpivotted_sensor_type.8f4d539301": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_sensor_type", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_sensor_type.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_sensor_type.8f4d539301", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_sensor_type"], "alias": "not_null_int_iot_data_unpivotted_sensor_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.1137066, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_sensor_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_type\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere sensor_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_type", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_type", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.not_null_int_iot_data_unpivotted_sensor_value.35de21c6e5": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_int_iot_data_unpivotted_sensor_value", "resource_type": "test", "package_name": "velux", "path": "not_null_int_iot_data_unpivotted_sensor_value.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.not_null_int_iot_data_unpivotted_sensor_value.35de21c6e5", "fqn": ["velux", "intermediate", "not_null_int_iot_data_unpivotted_sensor_value"], "alias": "not_null_int_iot_data_unpivotted_sensor_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873240.115707, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\not_null_int_iot_data_unpivotted_sensor_value.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_value\nfrom VELUX_DEV.STAGING.int_iot_data_unpivotted\nwhere sensor_value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_value", "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_value", "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": null}}, "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type.e3b5c1add3": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type", "resource_type": "test", "package_name": "velux", "path": "dbt_utils_unique_combination_o_ad81229c8d99701271a2a680552425df.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type.e3b5c1add3", "fqn": ["velux", "intermediate", "dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type"], "alias": "dbt_utils_unique_combination_o_ad81229c8d99701271a2a680552425df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ad81229c8d99701271a2a680552425df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ad81229c8d99701271a2a680552425df"}, "created_at": 1748873240.1172092, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ad81229c8d99701271a2a680552425df\") }}", "language": "sql", "refs": [{"name": "int_iot_data_unpivotted", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.int_iot_data_unpivotted"]}, "compiled_path": "target\\compiled\\velux\\models\\intermediate\\intermediate.yml\\dbt_utils_unique_combination_o_ad81229c8d99701271a2a680552425df.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        event_timestamp, device_id, room, sensor_type\n    from VELUX_DEV.STAGING.int_iot_data_unpivotted\n    group by event_timestamp, device_id, room, sensor_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.int_iot_data_unpivotted", "attached_node": "model.velux.int_iot_data_unpivotted", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_timestamp", "device_id", "room", "sensor_type"], "model": "{{ get_where_subquery(ref('int_iot_data_unpivotted')) }}"}, "namespace": "dbt_utils"}}, "model.velux.dim_time": {"database": "VELUX_DEV", "schema": "MARTS", "name": "dim_time", "resource_type": "model", "package_name": "velux", "path": "marts\\dim_time.sql", "original_file_path": "models\\marts\\dim_time.sql", "unique_id": "model.velux.dim_time", "fqn": ["velux", "marts", "dim_time"], "alias": "dim_time", "checksum": {"name": "sha256", "checksum": "40612c977dd31430df9031274386833c9c197cc5a5e8e08adf7f1fd6aa5525aa"}, "config": {"enabled": true, "alias": null, "schema": "MARTS", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["marts"], "description": "Dimension table for time, providing various date and time attributes for each event_timestamp.", "columns": {"time_id": {"name": "time_id", "description": "Surrogate key for a unique event_timestamp.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_date": {"name": "event_date", "description": "Date of the event.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_timestamp": {"name": "event_timestamp", "description": "Full timestamp of the event.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "hour_of_day": {"name": "hour_of_day", "description": "Hour of the day (0-23).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "day_of_week": {"name": "day_of_week", "description": "Day of the week (e.g., 0 for Sunday, 1 for Monday in Snowflake DOW).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "day_of_month": {"name": "day_of_month", "description": "Day of the month (1-31).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "month_number": {"name": "month_number", "description": "Month number (1-12).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "year_number": {"name": "year_number", "description": "Year (e.g., 2023).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "is_weekend": {"name": "is_weekend", "description": "Boolean indicating if the day is a weekend.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "season": {"name": "season", "description": "Meteorological season (Winter, Spring, Summer, Fall).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "day_name": {"name": "day_name", "description": "Name of the day (e.g., Monday, Tuesday).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "month_name": {"name": "month_name", "description": "Name of the month (e.g., January, February).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\marts\\marts.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "MARTS", "contract": {"enforced": true}, "tags": ["marts"]}, "created_at": 1748873417.7422564, "relation_name": "VELUX_DEV.MARTS.dim_time", "raw_code": "{{ config(tags=['marts']) }}\n\nWITH base_time AS (\n    SELECT DISTINCT event_timestamp\n    FROM {{ ref('int_iot_data_with_weather') }}\n)\n\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['event_timestamp']) }} AS time_id,\n    DATE(event_timestamp) AS event_date,\n    event_timestamp,\n    EXTRACT(HOUR FROM event_timestamp) AS hour_of_day,\n    EXTRACT(DOW FROM event_timestamp) AS day_of_week,\n    EXTRACT(DAY FROM event_timestamp) AS day_of_month,\n    EXTRACT(MONTH FROM event_timestamp) AS month_number,\n    EXTRACT(YEAR FROM event_timestamp) AS year_number,\n    CASE \n        WHEN EXTRACT(DOW FROM event_timestamp) IN (0, 6) THEN TRUE \n        ELSE FALSE \n    END AS is_weekend,\n    CASE\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (12, 1, 2) THEN 'Winter'\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (3, 4, 5) THEN 'Spring'\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (6, 7, 8) THEN 'Summer'\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (9, 10, 11) THEN 'Fall'\n    END AS season,\n    DAYNAME(event_timestamp) AS day_name,\n    MONTHNAME(event_timestamp) AS month_name\n    \nFROM base_time", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\dim_time.sql", "compiled": true, "compiled_code": "\n\nWITH base_time AS (\n    SELECT DISTINCT event_timestamp\n    FROM VELUX_DEV.STAGING.int_iot_data_with_weather\n)\n\nSELECT\n    md5(cast(coalesce(cast(event_timestamp as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS time_id,\n    DATE(event_timestamp) AS event_date,\n    event_timestamp,\n    EXTRACT(HOUR FROM event_timestamp) AS hour_of_day,\n    EXTRACT(DOW FROM event_timestamp) AS day_of_week,\n    EXTRACT(DAY FROM event_timestamp) AS day_of_month,\n    EXTRACT(MONTH FROM event_timestamp) AS month_number,\n    EXTRACT(YEAR FROM event_timestamp) AS year_number,\n    CASE \n        WHEN EXTRACT(DOW FROM event_timestamp) IN (0, 6) THEN TRUE \n        ELSE FALSE \n    END AS is_weekend,\n    CASE\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (12, 1, 2) THEN 'Winter'\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (3, 4, 5) THEN 'Spring'\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (6, 7, 8) THEN 'Summer'\n        WHEN EXTRACT(MONTH FROM event_timestamp) IN (9, 10, 11) THEN 'Fall'\n    END AS season,\n    DAYNAME(event_timestamp) AS day_name,\n    MONTHNAME(event_timestamp) AS month_name\n    \nFROM base_time", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "971d2d765a4b3e0491220717adc7b3112c99b4cc1afcbc2047fa2690f9f3d8f4"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["time_id"], "time_spine": null}, "model.velux.dim_locations": {"database": "VELUX_DEV", "schema": "MARTS", "name": "dim_locations", "resource_type": "model", "package_name": "velux", "path": "marts\\dim_locations.sql", "original_file_path": "models\\marts\\dim_locations.sql", "unique_id": "model.velux.dim_locations", "fqn": ["velux", "marts", "dim_locations"], "alias": "dim_locations", "checksum": {"name": "sha256", "checksum": "10045e475ee74ecb522e331cef34596c54ff4020063ea556ad5a4483837d2aa8"}, "config": {"enabled": true, "alias": null, "schema": "MARTS", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["marts"], "description": "Dimension table for locations, providing unique city and country combinations.", "columns": {"location_id": {"name": "location_id", "description": "Surrogate key for location (city, country).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "city": {"name": "city", "description": "Name of the city.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "country": {"name": "country", "description": "Name of the country.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\marts\\marts.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "MARTS", "contract": {"enforced": true}, "tags": ["marts"]}, "created_at": 1748873417.7457643, "relation_name": "VELUX_DEV.MARTS.dim_locations", "raw_code": "{{ config(tags=['marts']) }}\n\nWITH location_data AS (\n    SELECT DISTINCT\n        city,\n        country\n    FROM {{ ref('int_iot_data_with_weather') }}\n)\n\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['city', 'country']) }} AS location_id,\n    city,\n    country\n\nFROM location_data", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\dim_locations.sql", "compiled": true, "compiled_code": "\n\nWITH location_data AS (\n    SELECT DISTINCT\n        city,\n        country\n    FROM VELUX_DEV.STAGING.int_iot_data_with_weather\n)\n\nSELECT\n    md5(cast(coalesce(cast(city as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS location_id,\n    city,\n    country\n\nFROM location_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "9d15a9fd48b69489c2986397799b6a9f503eb19b0348b529ddddae499aee8a8c"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["location_id"], "time_spine": null}, "model.velux.dim_sensors": {"database": "VELUX_DEV", "schema": "MARTS", "name": "dim_sensors", "resource_type": "model", "package_name": "velux", "path": "marts\\dim_sensors.sql", "original_file_path": "models\\marts\\dim_sensors.sql", "unique_id": "model.velux.dim_sensors", "fqn": ["velux", "marts", "dim_sensors"], "alias": "dim_sensors", "checksum": {"name": "sha256", "checksum": "2babe87376887650d15a06fcff50513a9c568d133f7b5721197e2e11d04bff3c"}, "config": {"enabled": true, "alias": null, "schema": "MARTS", "database": null, "tags": ["marts"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["marts"], "description": "Dimension table for sensors, detailing device, room, sensor type, and measurement unit.", "columns": {"sensor_id": {"name": "sensor_id", "description": "Surrogate key for a specific sensor instance (device, room, type).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "Identifier of the IoT device.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "room": {"name": "room", "description": "Room where the sensor is located or 'outdoor'/'indoor' for general device sensors.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_type": {"name": "sensor_type", "description": "Type of measurement the sensor records (e.g., co2(parts per million), temperature(celsius)).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "measurement_unit": {"name": "measurement_unit", "description": "The unit of measurement for the sensor_type (e.g., ppm, %, \u00b0C).", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\marts\\marts.yml", "build_path": null, "unrendered_config": {"materialized": "table", "persist_docs": {"relation": true, "columns": true}, "schema": "MARTS", "contract": {"enforced": true}, "tags": ["marts"]}, "created_at": 1748873417.7487757, "relation_name": "VELUX_DEV.MARTS.dim_sensors", "raw_code": "{{ config(tags=['marts']) }}\n\nWITH sensor_types AS (\n    SELECT\n        sensor_type,\n        CASE\n            WHEN sensor_type = 'co2(parts per million)' THEN 'ppm'\n            WHEN sensor_type = 'relative_humidity(percent)' THEN '%'\n            WHEN sensor_type = 'temperature(celsius)' THEN '\u00b0C'\n            ELSE 'unknown'\n        END AS measurement_unit\n    FROM (\n        SELECT DISTINCT sensor_type\n        FROM {{ ref('int_iot_data_with_weather') }}\n    )\n),\n\nrooms AS (\n    SELECT DISTINCT room\n    FROM {{ ref('int_iot_data_with_weather') }}\n    WHERE room IS NOT NULL\n),\n\nsensor_data AS (\n    SELECT DISTINCT\n        room,\n        sensor_type,\n        device_id\n    FROM {{ ref('int_iot_data_with_weather') }}\n)\n\nSELECT\n    {{ dbt_utils.generate_surrogate_key(['sd.sensor_type', 'sd.device_id', 'sd.room']) }} AS sensor_id,\n    sd.device_id,\n    sd.room,\n    sd.sensor_type,\n    st.measurement_unit\n\nFROM sensor_data sd\nJOIN sensor_types st ON sd.sensor_type = st.sensor_type", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}, {"name": "int_iot_data_with_weather", "package": null, "version": null}, {"name": "int_iot_data_with_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.velux.int_iot_data_with_weather"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\dim_sensors.sql", "compiled": true, "compiled_code": "\n\nWITH sensor_types AS (\n    SELECT\n        sensor_type,\n        CASE\n            WHEN sensor_type = 'co2(parts per million)' THEN 'ppm'\n            WHEN sensor_type = 'relative_humidity(percent)' THEN '%'\n            WHEN sensor_type = 'temperature(celsius)' THEN '\u00b0C'\n            ELSE 'unknown'\n        END AS measurement_unit\n    FROM (\n        SELECT DISTINCT sensor_type\n        FROM VELUX_DEV.STAGING.int_iot_data_with_weather\n    )\n),\n\nrooms AS (\n    SELECT DISTINCT room\n    FROM VELUX_DEV.STAGING.int_iot_data_with_weather\n    WHERE room IS NOT NULL\n),\n\nsensor_data AS (\n    SELECT DISTINCT\n        room,\n        sensor_type,\n        device_id\n    FROM VELUX_DEV.STAGING.int_iot_data_with_weather\n)\n\nSELECT\n    md5(cast(coalesce(cast(sd.sensor_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sd.device_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sd.room as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS sensor_id,\n    sd.device_id,\n    sd.room,\n    sd.sensor_type,\n    st.measurement_unit\n\nFROM sensor_data sd\nJOIN sensor_types st ON sd.sensor_type = st.sensor_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "46de082486859354ce76c0385423744ffbb4806b315bc99cf4982a7637dc8e55"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["sensor_id"], "time_spine": null}, "test.velux.unique_dim_time_time_id.0752c025e8": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "unique_dim_time_time_id", "resource_type": "test", "package_name": "velux", "path": "unique_dim_time_time_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.unique_dim_time_time_id.0752c025e8", "fqn": ["velux", "marts", "unique_dim_time_time_id"], "alias": "unique_dim_time_time_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8765883, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\unique_dim_time_time_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    time_id as unique_field,\n    count(*) as n_records\n\nfrom VELUX_DEV.MARTS.dim_time\nwhere time_id is not null\ngroup by time_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_id", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "unique", "kwargs": {"column_name": "time_id", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_time_id.6bb481dd5c": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_time_id", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_time_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_time_id.6bb481dd5c", "fqn": ["velux", "marts", "not_null_dim_time_time_id"], "alias": "not_null_dim_time_time_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8776236, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_time_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_id\nfrom VELUX_DEV.MARTS.dim_time\nwhere time_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_id", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_id", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_event_date.15d19b444b": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_event_date", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_event_date.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_event_date.15d19b444b", "fqn": ["velux", "marts", "not_null_dim_time_event_date"], "alias": "not_null_dim_time_event_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.880191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_event_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_date\nfrom VELUX_DEV.MARTS.dim_time\nwhere event_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_date", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_date", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_event_timestamp.55d25feabe": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_event_timestamp", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_event_timestamp.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_event_timestamp.55d25feabe", "fqn": ["velux", "marts", "not_null_dim_time_event_timestamp"], "alias": "not_null_dim_time_event_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.880191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_event_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom VELUX_DEV.MARTS.dim_time\nwhere event_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_timestamp", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_timestamp", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_hour_of_day.6e43b14138": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_hour_of_day", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_hour_of_day.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_hour_of_day.6e43b14138", "fqn": ["velux", "marts", "not_null_dim_time_hour_of_day"], "alias": "not_null_dim_time_hour_of_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8825204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_hour_of_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hour_of_day\nfrom VELUX_DEV.MARTS.dim_time\nwhere hour_of_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hour_of_day", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour_of_day", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_day_of_week.296786d878": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_day_of_week", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_day_of_week.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_day_of_week.296786d878", "fqn": ["velux", "marts", "not_null_dim_time_day_of_week"], "alias": "not_null_dim_time_day_of_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8833616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_day_of_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_of_week\nfrom VELUX_DEV.MARTS.dim_time\nwhere day_of_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "day_of_week", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_week", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_day_of_month.2366c8be4e": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_day_of_month", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_day_of_month.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_day_of_month.2366c8be4e", "fqn": ["velux", "marts", "not_null_dim_time_day_of_month"], "alias": "not_null_dim_time_day_of_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.885437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_day_of_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_of_month\nfrom VELUX_DEV.MARTS.dim_time\nwhere day_of_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "day_of_month", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_month", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_month_number.717cfb859a": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_month_number", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_month_number.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_month_number.717cfb859a", "fqn": ["velux", "marts", "not_null_dim_time_month_number"], "alias": "not_null_dim_time_month_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.887038, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_month_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_number\nfrom VELUX_DEV.MARTS.dim_time\nwhere month_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "month_number", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_number", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_year_number.780092878e": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_year_number", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_year_number.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_year_number.780092878e", "fqn": ["velux", "marts", "not_null_dim_time_year_number"], "alias": "not_null_dim_time_year_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8889837, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_year_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year_number\nfrom VELUX_DEV.MARTS.dim_time\nwhere year_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "year_number", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "year_number", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_is_weekend.f294374ebd": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_is_weekend", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_is_weekend.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_is_weekend.f294374ebd", "fqn": ["velux", "marts", "not_null_dim_time_is_weekend"], "alias": "not_null_dim_time_is_weekend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.889982, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_is_weekend.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_weekend\nfrom VELUX_DEV.MARTS.dim_time\nwhere is_weekend is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_weekend", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_weekend", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_season.cefce22d00": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_season", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_season.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_season.cefce22d00", "fqn": ["velux", "marts", "not_null_dim_time_season"], "alias": "not_null_dim_time_season", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8919833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_season.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect season\nfrom VELUX_DEV.MARTS.dim_time\nwhere season is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "season", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_day_name.a2e1929d4a": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_day_name", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_day_name.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_day_name.a2e1929d4a", "fqn": ["velux", "marts", "not_null_dim_time_day_name"], "alias": "not_null_dim_time_day_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8934789, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_day_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_name\nfrom VELUX_DEV.MARTS.dim_time\nwhere day_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "day_name", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_name", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.not_null_dim_time_month_name.5b491402b4": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_time_month_name", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_time_month_name.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_time_month_name.5b491402b4", "fqn": ["velux", "marts", "not_null_dim_time_month_name"], "alias": "not_null_dim_time_month_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.894668, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_time_month_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_name\nfrom VELUX_DEV.MARTS.dim_time\nwhere month_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "month_name", "file_key_name": "models.dim_time", "attached_node": "model.velux.dim_time", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_name", "model": "{{ get_where_subquery(ref('dim_time')) }}"}, "namespace": null}}, "test.velux.unique_dim_locations_location_id.09f471618d": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "unique_dim_locations_location_id", "resource_type": "test", "package_name": "velux", "path": "unique_dim_locations_location_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.unique_dim_locations_location_id.09f471618d", "fqn": ["velux", "marts", "unique_dim_locations_location_id"], "alias": "unique_dim_locations_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8962045, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_locations"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\unique_dim_locations_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    location_id as unique_field,\n    count(*) as n_records\n\nfrom VELUX_DEV.MARTS.dim_locations\nwhere location_id is not null\ngroup by location_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.dim_locations", "attached_node": "model.velux.dim_locations", "test_metadata": {"name": "unique", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('dim_locations')) }}"}, "namespace": null}}, "test.velux.not_null_dim_locations_location_id.70b6875476": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_locations_location_id", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_locations_location_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_locations_location_id.70b6875476", "fqn": ["velux", "marts", "not_null_dim_locations_location_id"], "alias": "not_null_dim_locations_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.8977392, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_locations"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_locations_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom VELUX_DEV.MARTS.dim_locations\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.dim_locations", "attached_node": "model.velux.dim_locations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('dim_locations')) }}"}, "namespace": null}}, "test.velux.not_null_dim_locations_city.1544cc8256": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_locations_city", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_locations_city.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_locations_city.1544cc8256", "fqn": ["velux", "marts", "not_null_dim_locations_city"], "alias": "not_null_dim_locations_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.898774, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_locations"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_locations_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom VELUX_DEV.MARTS.dim_locations\nwhere city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city", "file_key_name": "models.dim_locations", "attached_node": "model.velux.dim_locations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(ref('dim_locations')) }}"}, "namespace": null}}, "test.velux.not_null_dim_locations_country.18b7d518a6": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_locations_country", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_locations_country.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_locations_country.18b7d518a6", "fqn": ["velux", "marts", "not_null_dim_locations_country"], "alias": "not_null_dim_locations_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.899743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_locations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_locations"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_locations_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country\nfrom VELUX_DEV.MARTS.dim_locations\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country", "file_key_name": "models.dim_locations", "attached_node": "model.velux.dim_locations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('dim_locations')) }}"}, "namespace": null}}, "test.velux.unique_dim_sensors_sensor_id.afa6d3dbaa": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "unique_dim_sensors_sensor_id", "resource_type": "test", "package_name": "velux", "path": "unique_dim_sensors_sensor_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.unique_dim_sensors_sensor_id.afa6d3dbaa", "fqn": ["velux", "marts", "unique_dim_sensors_sensor_id"], "alias": "unique_dim_sensors_sensor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.9009607, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\unique_dim_sensors_sensor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sensor_id as unique_field,\n    count(*) as n_records\n\nfrom VELUX_DEV.MARTS.dim_sensors\nwhere sensor_id is not null\ngroup by sensor_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_id", "file_key_name": "models.dim_sensors", "attached_node": "model.velux.dim_sensors", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sensor_id", "model": "{{ get_where_subquery(ref('dim_sensors')) }}"}, "namespace": null}}, "test.velux.not_null_dim_sensors_sensor_id.d39dd3c588": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_sensors_sensor_id", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_sensors_sensor_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_sensors_sensor_id.d39dd3c588", "fqn": ["velux", "marts", "not_null_dim_sensors_sensor_id"], "alias": "not_null_dim_sensors_sensor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.9035316, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_sensors_sensor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_id\nfrom VELUX_DEV.MARTS.dim_sensors\nwhere sensor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_id", "file_key_name": "models.dim_sensors", "attached_node": "model.velux.dim_sensors", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_id", "model": "{{ get_where_subquery(ref('dim_sensors')) }}"}, "namespace": null}}, "test.velux.not_null_dim_sensors_device_id.e4990890b6": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_sensors_device_id", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_sensors_device_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_sensors_device_id.e4990890b6", "fqn": ["velux", "marts", "not_null_dim_sensors_device_id"], "alias": "not_null_dim_sensors_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.9044986, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_sensors_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom VELUX_DEV.MARTS.dim_sensors\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.dim_sensors", "attached_node": "model.velux.dim_sensors", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('dim_sensors')) }}"}, "namespace": null}}, "test.velux.not_null_dim_sensors_room.b001c8477c": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_sensors_room", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_sensors_room.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_sensors_room.b001c8477c", "fqn": ["velux", "marts", "not_null_dim_sensors_room"], "alias": "not_null_dim_sensors_room", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.9063742, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_sensors_room.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect room\nfrom VELUX_DEV.MARTS.dim_sensors\nwhere room is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "room", "file_key_name": "models.dim_sensors", "attached_node": "model.velux.dim_sensors", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "room", "model": "{{ get_where_subquery(ref('dim_sensors')) }}"}, "namespace": null}}, "test.velux.not_null_dim_sensors_sensor_type.2e1ff9e6c0": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_sensors_sensor_type", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_sensors_sensor_type.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_sensors_sensor_type.2e1ff9e6c0", "fqn": ["velux", "marts", "not_null_dim_sensors_sensor_type"], "alias": "not_null_dim_sensors_sensor_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.9073794, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_sensors_sensor_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_type\nfrom VELUX_DEV.MARTS.dim_sensors\nwhere sensor_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_type", "file_key_name": "models.dim_sensors", "attached_node": "model.velux.dim_sensors", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_type", "model": "{{ get_where_subquery(ref('dim_sensors')) }}"}, "namespace": null}}, "test.velux.not_null_dim_sensors_measurement_unit.85ac41ebba": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_dim_sensors_measurement_unit", "resource_type": "test", "package_name": "velux", "path": "not_null_dim_sensors_measurement_unit.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_dim_sensors_measurement_unit.85ac41ebba", "fqn": ["velux", "marts", "not_null_dim_sensors_measurement_unit"], "alias": "not_null_dim_sensors_measurement_unit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748873417.9094117, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_dim_sensors_measurement_unit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect measurement_unit\nfrom VELUX_DEV.MARTS.dim_sensors\nwhere measurement_unit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "measurement_unit", "file_key_name": "models.dim_sensors", "attached_node": "model.velux.dim_sensors", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "measurement_unit", "model": "{{ get_where_subquery(ref('dim_sensors')) }}"}, "namespace": null}}, "model.velux.fct_readings": {"database": "VELUX_DEV", "schema": "MARTS", "name": "fct_readings", "resource_type": "model", "package_name": "velux", "path": "marts\\fct_readings.sql", "original_file_path": "models\\marts\\fct_readings.sql", "unique_id": "model.velux.fct_readings", "fqn": ["velux", "marts", "fct_readings"], "alias": "fct_readings", "checksum": {"name": "sha256", "checksum": "6183bddedd4e33bcd38b1cdfec7466c4c74c20445c6368c2707e4184cf73b56f"}, "config": {"enabled": true, "alias": null, "schema": "MARTS", "database": null, "tags": ["marts", "marts", "dev", "hourly_metrics"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "reading_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "cluster_by": ["event_date"]}, "tags": ["marts", "dev", "hourly_metrics"], "description": "Fact table containing all IoT sensor readings, enriched with weather data and dimensional keys. This model is configured for incremental loading and clustered by event_date.", "columns": {"reading_id": {"name": "reading_id", "description": "Surrogate primary key for each reading, generated from event_timestamp and device_id.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "time_id": {"name": "time_id", "description": "Foreign key referencing the dim_time dimension, linking to detailed time attributes.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "location_id": {"name": "location_id", "description": "Foreign key referencing the dim_locations dimension, linking to detailed location attributes.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_id": {"name": "sensor_id", "description": "Foreign key referencing the dim_sensors dimension, linking to detailed sensor attributes.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "device_id": {"name": "device_id", "description": "Identifier for the IoT device that produced the reading.", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_timestamp": {"name": "event_timestamp", "description": "The exact timestamp when the sensor event occurred, in UTC.", "meta": {}, "data_type": "timestamp_ntz", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_date": {"name": "event_date", "description": "The date part of event_timestamp, used for partitioning and clustering.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sensor_value": {"name": "sensor_value", "description": "The actual value recorded by the sensor.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "outdoor_temperature_celsius": {"name": "outdoor_temperature_celsius", "description": "Outdoor temperature in Celsius at the time of the reading.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "dew_point_temperature_celsius": {"name": "dew_point_temperature_celsius", "description": "Outdoor dew point temperature in Celsius.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "mean_sea_level_pressure_hpa": {"name": "mean_sea_level_pressure_hpa", "description": "Mean sea level air pressure in hPa.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "wind_speed_ms": {"name": "wind_speed_ms", "description": "Wind speed in meters per second.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "visibility_km": {"name": "visibility_km", "description": "Visibility in kilometers.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "solar_irradiance_w_m2": {"name": "solar_irradiance_w_m2", "description": "Solar irradiance in Watts per square meter.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "uv_index": {"name": "uv_index", "description": "Ultraviolet radiation index.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sunshine_duration_minutes": {"name": "sunshine_duration_minutes", "description": "Duration of sunshine in minutes for the period.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "precipitation_type_description": {"name": "precipitation_type_description", "description": "Textual description of the precipitation type (e.g., 'rain', 'snow', 'none').", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "velux://models\\marts\\marts.yml", "build_path": null, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "schema": "MARTS", "contract": {"enforced": true}, "on_schema_change": "append_new_columns", "tags": ["marts", "marts", "dev", "hourly_metrics"], "unique_key": "reading_id", "cluster_by": ["event_date"]}, "created_at": 1748876315.799803, "relation_name": "VELUX_DEV.MARTS.fct_readings", "raw_code": "{{ config(tags=['marts']) }}\n\n{{ config(\n    materialized='incremental',\n    unique_key='reading_id',\n    cluster_by=['event_date'],\n    tags=['marts', 'dev', 'hourly_metrics']\n) }}\n\nWITH iot_combined AS (\n    SELECT \n        event_timestamp,\n        country,\n        city,\n        sensor_type,\n        sensor_value,\n        room,\n        device_id,\n        outdoor_temperature_celsius,\n        dew_point_temperature_celsius,\n        mean_sea_level_pressure_hpa,\n        wind_speed_ms,\n        visibility_km,\n        solar_irradiance_w_m2,\n        uv_index,\n        sunshine_duration_minutes,\n        precipitation_type_description,\n\n        {{ dbt_utils.generate_surrogate_key([\n            'event_timestamp', \n            'sensor_type', \n            'room',\n            'device_id'\n        ]) }} AS reading_id\n\n\n     FROM {{ ref('int_iot_data_with_weather') }}\n    {% if is_incremental() %}\n    WHERE event_timestamp > (SELECT MAX(event_timestamp) FROM {{ this }})\n    {% endif %}\n),\n\ndim_time AS (\n    SELECT * FROM {{ ref('dim_time') }}\n),\n\ndim_locations AS (\n    SELECT * FROM {{ ref('dim_locations') }}\n),\n\ndim_sensors AS (\n    SELECT * FROM {{ ref('dim_sensors') }}\n)\n\nSELECT\n    iot_combined.reading_id,\n\n    dim_time.time_id,\n    dim_locations.location_id,\n    dim_sensors.sensor_id,\n    dim_time.event_date,\n    dim_time.event_timestamp,\n    dim_sensors.device_id,\n\n    iot_combined.sensor_value,\n    iot_combined.outdoor_temperature_celsius,\n    iot_combined.dew_point_temperature_celsius,\n    iot_combined.mean_sea_level_pressure_hpa,\n    iot_combined.wind_speed_ms,\n    iot_combined.visibility_km,\n    iot_combined.solar_irradiance_w_m2,\n    iot_combined.uv_index,\n    iot_combined.sunshine_duration_minutes,\n    iot_combined.precipitation_type_description\n\nFROM iot_combined\nLEFT JOIN dim_time \n    ON iot_combined.event_timestamp = dim_time.event_timestamp\nLEFT JOIN dim_locations \n    ON iot_combined.city = dim_locations.city \n   AND iot_combined.country = dim_locations.country\nLEFT JOIN dim_sensors \n    ON iot_combined.room = dim_sensors.room \n   AND iot_combined.sensor_type = dim_sensors.sensor_type\n   AND iot_combined.device_id = dim_sensors.device_id -- Added device_id to join condition", "language": "sql", "refs": [{"name": "int_iot_data_with_weather", "package": null, "version": null}, {"name": "dim_time", "package": null, "version": null}, {"name": "dim_locations", "package": null, "version": null}, {"name": "dim_sensors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.velux.int_iot_data_with_weather", "model.velux.dim_time", "model.velux.dim_locations", "model.velux.dim_sensors"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\fct_readings.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH iot_combined AS (\n    SELECT \n        event_timestamp,\n        country,\n        city,\n        sensor_type,\n        sensor_value,\n        room,\n        device_id,\n        outdoor_temperature_celsius,\n        dew_point_temperature_celsius,\n        mean_sea_level_pressure_hpa,\n        wind_speed_ms,\n        visibility_km,\n        solar_irradiance_w_m2,\n        uv_index,\n        sunshine_duration_minutes,\n        precipitation_type_description,\n\n        md5(cast(coalesce(cast(event_timestamp as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sensor_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(room as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(device_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS reading_id\n\n\n     FROM VELUX_DEV.STAGING.int_iot_data_with_weather\n    \n    WHERE event_timestamp > (SELECT MAX(event_timestamp) FROM VELUX_DEV.MARTS.fct_readings)\n    \n),\n\ndim_time AS (\n    SELECT * FROM VELUX_DEV.MARTS.dim_time\n),\n\ndim_locations AS (\n    SELECT * FROM VELUX_DEV.MARTS.dim_locations\n),\n\ndim_sensors AS (\n    SELECT * FROM VELUX_DEV.MARTS.dim_sensors\n)\n\nSELECT\n    iot_combined.reading_id,\n\n    dim_time.time_id,\n    dim_locations.location_id,\n    dim_sensors.sensor_id,\n    dim_time.event_date,\n    dim_time.event_timestamp,\n    dim_sensors.device_id,\n\n    iot_combined.sensor_value,\n    iot_combined.outdoor_temperature_celsius,\n    iot_combined.dew_point_temperature_celsius,\n    iot_combined.mean_sea_level_pressure_hpa,\n    iot_combined.wind_speed_ms,\n    iot_combined.visibility_km,\n    iot_combined.solar_irradiance_w_m2,\n    iot_combined.uv_index,\n    iot_combined.sunshine_duration_minutes,\n    iot_combined.precipitation_type_description\n\nFROM iot_combined\nLEFT JOIN dim_time \n    ON iot_combined.event_timestamp = dim_time.event_timestamp\nLEFT JOIN dim_locations \n    ON iot_combined.city = dim_locations.city \n   AND iot_combined.country = dim_locations.country\nLEFT JOIN dim_sensors \n    ON iot_combined.room = dim_sensors.room \n   AND iot_combined.sensor_type = dim_sensors.sensor_type\n   AND iot_combined.device_id = dim_sensors.device_id -- Added device_id to join condition", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "3e61d1d3998b3e54f41f50f42bbbf76f691591d59635e5b010521b38cf7bdab9"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["reading_id"], "time_spine": null}, "test.velux.unique_fct_readings_reading_id.47dfa598e0": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "unique_fct_readings_reading_id", "resource_type": "test", "package_name": "velux", "path": "unique_fct_readings_reading_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.unique_fct_readings_reading_id.47dfa598e0", "fqn": ["velux", "marts", "unique_fct_readings_reading_id"], "alias": "unique_fct_readings_reading_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9181256, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\unique_fct_readings_reading_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    reading_id as unique_field,\n    count(*) as n_records\n\nfrom VELUX_DEV.MARTS.fct_readings\nwhere reading_id is not null\ngroup by reading_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reading_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "reading_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.not_null_fct_readings_reading_id.6386d0ff8f": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_reading_id", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_reading_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_reading_id.6386d0ff8f", "fqn": ["velux", "marts", "not_null_fct_readings_reading_id"], "alias": "not_null_fct_readings_reading_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9196317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_reading_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect reading_id\nfrom VELUX_DEV.MARTS.fct_readings\nwhere reading_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reading_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "reading_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR.7b231376d8": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_fddc0a3b8524eb48a59d8810e975d242.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR.7b231376d8", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR"], "alias": "dbt_expectations_expect_column_fddc0a3b8524eb48a59d8810e975d242", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fddc0a3b8524eb48a59d8810e975d242", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fddc0a3b8524eb48a59d8810e975d242"}, "created_at": 1748876315.9206686, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fddc0a3b8524eb48a59d8810e975d242\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_fddc0a3b8524eb48a59d8810e975d242.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'READING_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reading_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "reading_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.not_null_fct_readings_time_id.8fa755a9e5": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_time_id", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_time_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_time_id.8fa755a9e5", "fqn": ["velux", "marts", "not_null_fct_readings_time_id"], "alias": "not_null_fct_readings_time_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9403331, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_time_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_id\nfrom VELUX_DEV.MARTS.fct_readings\nwhere time_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "time_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.relationships_fct_readings_time_id__time_id__ref_dim_time_.80896ba915": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "relationships_fct_readings_time_id__time_id__ref_dim_time_", "resource_type": "test", "package_name": "velux", "path": "relationships_fct_readings_time_id__time_id__ref_dim_time_.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.relationships_fct_readings_time_id__time_id__ref_dim_time_.80896ba915", "fqn": ["velux", "marts", "relationships_fct_readings_time_id__time_id__ref_dim_time_"], "alias": "relationships_fct_readings_time_id__time_id__ref_dim_time_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9420357, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_time", "package": null, "version": null}, {"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_time", "model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\relationships_fct_readings_time_id__time_id__ref_dim_time_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select time_id as from_field\n    from VELUX_DEV.MARTS.fct_readings\n    where time_id is not null\n),\n\nparent as (\n    select time_id as to_field\n    from VELUX_DEV.MARTS.dim_time\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_time')", "field": "time_id", "column_name": "time_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR.d71e6abfa8": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_f655a42bd30e5d4be290b929e19d9bbb.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR.d71e6abfa8", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR"], "alias": "dbt_expectations_expect_column_f655a42bd30e5d4be290b929e19d9bbb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f655a42bd30e5d4be290b929e19d9bbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f655a42bd30e5d4be290b929e19d9bbb"}, "created_at": 1748876315.9482121, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f655a42bd30e5d4be290b929e19d9bbb\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_f655a42bd30e5d4be290b929e19d9bbb.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIME_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "time_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "time_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.not_null_fct_readings_location_id.867f987594": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_location_id", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_location_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_location_id.867f987594", "fqn": ["velux", "marts", "not_null_fct_readings_location_id"], "alias": "not_null_fct_readings_location_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9527726, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_location_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect location_id\nfrom VELUX_DEV.MARTS.fct_readings\nwhere location_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.relationships_fct_readings_location_id__location_id__ref_dim_locations_.54dcf3ae94": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "relationships_fct_readings_location_id__location_id__ref_dim_locations_", "resource_type": "test", "package_name": "velux", "path": "relationships_fct_readings_1981d802a16548f1c19ba6c478c6983d.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.relationships_fct_readings_location_id__location_id__ref_dim_locations_.54dcf3ae94", "fqn": ["velux", "marts", "relationships_fct_readings_location_id__location_id__ref_dim_locations_"], "alias": "relationships_fct_readings_1981d802a16548f1c19ba6c478c6983d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_readings_1981d802a16548f1c19ba6c478c6983d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_readings_1981d802a16548f1c19ba6c478c6983d"}, "created_at": 1748876315.9537816, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_readings_1981d802a16548f1c19ba6c478c6983d\") }}", "language": "sql", "refs": [{"name": "dim_locations", "package": null, "version": null}, {"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_locations", "model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\relationships_fct_readings_1981d802a16548f1c19ba6c478c6983d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select location_id as from_field\n    from VELUX_DEV.MARTS.fct_readings\n    where location_id is not null\n),\n\nparent as (\n    select location_id as to_field\n    from VELUX_DEV.MARTS.dim_locations\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_locations')", "field": "location_id", "column_name": "location_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR.ac9b14772f": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_79afd0e1a9b339e4373ce48c59b045cc.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR.ac9b14772f", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR"], "alias": "dbt_expectations_expect_column_79afd0e1a9b339e4373ce48c59b045cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79afd0e1a9b339e4373ce48c59b045cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_79afd0e1a9b339e4373ce48c59b045cc"}, "created_at": 1748876315.9576106, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79afd0e1a9b339e4373ce48c59b045cc\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_79afd0e1a9b339e4373ce48c59b045cc.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LOCATION_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "location_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.not_null_fct_readings_sensor_id.7a06207ecb": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_sensor_id", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_sensor_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_sensor_id.7a06207ecb", "fqn": ["velux", "marts", "not_null_fct_readings_sensor_id"], "alias": "not_null_fct_readings_sensor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.962734, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_sensor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sensor_id\nfrom VELUX_DEV.MARTS.fct_readings\nwhere sensor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sensor_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_.81497e9c69": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_", "resource_type": "test", "package_name": "velux", "path": "relationships_fct_readings_94a2f563dc3e370097671e0b5813a9a4.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_.81497e9c69", "fqn": ["velux", "marts", "relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_"], "alias": "relationships_fct_readings_94a2f563dc3e370097671e0b5813a9a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_readings_94a2f563dc3e370097671e0b5813a9a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fct_readings_94a2f563dc3e370097671e0b5813a9a4"}, "created_at": 1748876315.9637399, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_readings_94a2f563dc3e370097671e0b5813a9a4\") }}", "language": "sql", "refs": [{"name": "dim_sensors", "package": null, "version": null}, {"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.dim_sensors", "model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\relationships_fct_readings_94a2f563dc3e370097671e0b5813a9a4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select sensor_id as from_field\n    from VELUX_DEV.MARTS.fct_readings\n    where sensor_id is not null\n),\n\nparent as (\n    select sensor_id as to_field\n    from VELUX_DEV.MARTS.dim_sensors\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_sensors')", "field": "sensor_id", "column_name": "sensor_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR.5c4002ac9d": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_7dc22928df615241034ee304f9011aca.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR.5c4002ac9d", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR"], "alias": "dbt_expectations_expect_column_7dc22928df615241034ee304f9011aca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7dc22928df615241034ee304f9011aca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7dc22928df615241034ee304f9011aca"}, "created_at": 1748876315.9688084, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7dc22928df615241034ee304f9011aca\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_7dc22928df615241034ee304f9011aca.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SENSOR_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "sensor_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.not_null_fct_readings_device_id.a77b43db47": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_device_id", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_device_id.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_device_id.a77b43db47", "fqn": ["velux", "marts", "not_null_fct_readings_device_id"], "alias": "not_null_fct_readings_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9725766, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_device_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect device_id\nfrom VELUX_DEV.MARTS.fct_readings\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR.92eda883f4": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_5258da8d5f6adf3a85cb64e50a30943e.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR.92eda883f4", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR"], "alias": "dbt_expectations_expect_column_5258da8d5f6adf3a85cb64e50a30943e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5258da8d5f6adf3a85cb64e50a30943e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_5258da8d5f6adf3a85cb64e50a30943e"}, "created_at": 1748876315.9732165, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5258da8d5f6adf3a85cb64e50a30943e\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_5258da8d5f6adf3a85cb64e50a30943e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEVICE_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "device_id", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "device_id", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.not_null_fct_readings_event_timestamp.86f13a196e": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_event_timestamp", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_event_timestamp.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_event_timestamp.86f13a196e", "fqn": ["velux", "marts", "not_null_fct_readings_event_timestamp"], "alias": "not_null_fct_readings_event_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9773502, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_event_timestamp.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_timestamp\nfrom VELUX_DEV.MARTS.fct_readings\nwhere event_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_timestamp", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_timestamp", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ.6df7cc191e": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_66026704551c27fc237a395c1c0ec34b.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ.6df7cc191e", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ"], "alias": "dbt_expectations_expect_column_66026704551c27fc237a395c1c0ec34b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66026704551c27fc237a395c1c0ec34b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_66026704551c27fc237a395c1c0ec34b"}, "created_at": 1748876315.9793754, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66026704551c27fc237a395c1c0ec34b\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_66026704551c27fc237a395c1c0ec34b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_timestamp", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "TIMESTAMP_NTZ", "column_name": "event_timestamp", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.not_null_fct_readings_event_date.d668f3581d": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "not_null_fct_readings_event_date", "resource_type": "test", "package_name": "velux", "path": "not_null_fct_readings_event_date.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.not_null_fct_readings_event_date.d668f3581d", "fqn": ["velux", "marts", "not_null_fct_readings_event_date"], "alias": "not_null_fct_readings_event_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1748876315.9836302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\not_null_fct_readings_event_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_date\nfrom VELUX_DEV.MARTS.fct_readings\nwhere event_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_date", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_date", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": null}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE.e6d232b18a": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_4946e3c5a637609e199ab5691a74f6be.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE.e6d232b18a", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE"], "alias": "dbt_expectations_expect_column_4946e3c5a637609e199ab5691a74f6be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4946e3c5a637609e199ab5691a74f6be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4946e3c5a637609e199ab5691a74f6be"}, "created_at": 1748876315.9855292, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4946e3c5a637609e199ab5691a74f6be\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_4946e3c5a637609e199ab5691a74f6be.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_date", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "DATE", "column_name": "event_date", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT.f1516b42ea": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_53f4a9463310baa2aaaa9c7c8fb649aa.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT.f1516b42ea", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT"], "alias": "dbt_expectations_expect_column_53f4a9463310baa2aaaa9c7c8fb649aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_53f4a9463310baa2aaaa9c7c8fb649aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_53f4a9463310baa2aaaa9c7c8fb649aa"}, "created_at": 1748876315.9890687, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_53f4a9463310baa2aaaa9c7c8fb649aa\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_53f4a9463310baa2aaaa9c7c8fb649aa.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SENSOR_VALUE'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_value", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "sensor_value", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100.f12c40e6cf": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_52dab6eebfa076a022aa3d6cd4309c30.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100.f12c40e6cf", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100"], "alias": "dbt_expectations_expect_column_52dab6eebfa076a022aa3d6cd4309c30", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52dab6eebfa076a022aa3d6cd4309c30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_52dab6eebfa076a022aa3d6cd4309c30"}, "created_at": 1748876315.992606, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52dab6eebfa076a022aa3d6cd4309c30\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_52dab6eebfa076a022aa3d6cd4309c30.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and sensor_value >= -100 and sensor_value <= 10000\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sensor_value", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": -100, "max_value": 10000, "column_name": "sensor_value", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70.28b8e524c0": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_e8ffecf5c93f7918458fd86415c7c9e6.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70.28b8e524c0", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70"], "alias": "dbt_expectations_expect_column_e8ffecf5c93f7918458fd86415c7c9e6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e8ffecf5c93f7918458fd86415c7c9e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e8ffecf5c93f7918458fd86415c7c9e6"}, "created_at": 1748876316.009344, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e8ffecf5c93f7918458fd86415c7c9e6\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_e8ffecf5c93f7918458fd86415c7c9e6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and outdoor_temperature_celsius >= -70 and outdoor_temperature_celsius <= 70\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "outdoor_temperature_celsius", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": -70, "max_value": 70, "column_name": "outdoor_temperature_celsius", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT.0397324e2b": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_1e679370c9f7fa1fe22abc45ad4c610a.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT.0397324e2b", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT"], "alias": "dbt_expectations_expect_column_1e679370c9f7fa1fe22abc45ad4c610a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1e679370c9f7fa1fe22abc45ad4c610a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1e679370c9f7fa1fe22abc45ad4c610a"}, "created_at": 1748876316.0138779, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1e679370c9f7fa1fe22abc45ad4c610a\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_1e679370c9f7fa1fe22abc45ad4c610a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OUTDOOR_TEMPERATURE_CELSIUS'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "outdoor_temperature_celsius", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "outdoor_temperature_celsius", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70.557f2c7b49": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_da590218f341c84229c798616e120198.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70.557f2c7b49", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70"], "alias": "dbt_expectations_expect_column_da590218f341c84229c798616e120198", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da590218f341c84229c798616e120198", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_da590218f341c84229c798616e120198"}, "created_at": 1748876316.0174327, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da590218f341c84229c798616e120198\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_da590218f341c84229c798616e120198.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and dew_point_temperature_celsius >= -70 and dew_point_temperature_celsius <= 70\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dew_point_temperature_celsius", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": -70, "max_value": 70, "column_name": "dew_point_temperature_celsius", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT.316cc723d6": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_c088622ac52fd12c7bfd0ed6be722329.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT.316cc723d6", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT"], "alias": "dbt_expectations_expect_column_c088622ac52fd12c7bfd0ed6be722329", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c088622ac52fd12c7bfd0ed6be722329", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c088622ac52fd12c7bfd0ed6be722329"}, "created_at": 1748876316.0210018, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c088622ac52fd12c7bfd0ed6be722329\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_c088622ac52fd12c7bfd0ed6be722329.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DEW_POINT_TEMPERATURE_CELSIUS'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dew_point_temperature_celsius", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "dew_point_temperature_celsius", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT.698652548a": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_4b052b4ec94ada754883edfdc3a329be.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT.698652548a", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT"], "alias": "dbt_expectations_expect_column_4b052b4ec94ada754883edfdc3a329be", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4b052b4ec94ada754883edfdc3a329be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4b052b4ec94ada754883edfdc3a329be"}, "created_at": 1748876316.026422, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4b052b4ec94ada754883edfdc3a329be\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_4b052b4ec94ada754883edfdc3a329be.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MEAN_SEA_LEVEL_PRESSURE_HPA'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "mean_sea_level_pressure_hpa", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "mean_sea_level_pressure_hpa", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0.46d2317f7e": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_f760cda47e9bffc53b7a216e8bd7bd04.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0.46d2317f7e", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0"], "alias": "dbt_expectations_expect_column_f760cda47e9bffc53b7a216e8bd7bd04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f760cda47e9bffc53b7a216e8bd7bd04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f760cda47e9bffc53b7a216e8bd7bd04"}, "created_at": 1748876316.0305798, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f760cda47e9bffc53b7a216e8bd7bd04\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_f760cda47e9bffc53b7a216e8bd7bd04.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and wind_speed_ms >= 0 and wind_speed_ms <= 100\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "wind_speed_ms", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 100, "column_name": "wind_speed_ms", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT.3884e931ef": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_981165a8d4e8d19fa79e5b2b6df94e9f.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT.3884e931ef", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT"], "alias": "dbt_expectations_expect_column_981165a8d4e8d19fa79e5b2b6df94e9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_981165a8d4e8d19fa79e5b2b6df94e9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_981165a8d4e8d19fa79e5b2b6df94e9f"}, "created_at": 1748876316.0335164, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_981165a8d4e8d19fa79e5b2b6df94e9f\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_981165a8d4e8d19fa79e5b2b6df94e9f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'WIND_SPEED_MS'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "wind_speed_ms", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "wind_speed_ms", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0.203f85dd55": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_f02262a7733dcd31a57bd77d6cfea22e.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0.203f85dd55", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0"], "alias": "dbt_expectations_expect_column_f02262a7733dcd31a57bd77d6cfea22e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f02262a7733dcd31a57bd77d6cfea22e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f02262a7733dcd31a57bd77d6cfea22e"}, "created_at": 1748876316.0369995, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f02262a7733dcd31a57bd77d6cfea22e\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_f02262a7733dcd31a57bd77d6cfea22e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and visibility_km >= 0 and visibility_km <= 200\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visibility_km", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 200, "column_name": "visibility_km", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT.5a3f2af483": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_33a76076542ba8c6218c286d8dfd82dd.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT.5a3f2af483", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT"], "alias": "dbt_expectations_expect_column_33a76076542ba8c6218c286d8dfd82dd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_33a76076542ba8c6218c286d8dfd82dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_33a76076542ba8c6218c286d8dfd82dd"}, "created_at": 1748876316.042194, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33a76076542ba8c6218c286d8dfd82dd\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_33a76076542ba8c6218c286d8dfd82dd.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VISIBILITY_KM'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visibility_km", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "visibility_km", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0.c43262e12f": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_41bde545046cf5b290d7401ca3aa821b.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0.c43262e12f", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0"], "alias": "dbt_expectations_expect_column_41bde545046cf5b290d7401ca3aa821b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41bde545046cf5b290d7401ca3aa821b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_41bde545046cf5b290d7401ca3aa821b"}, "created_at": 1748876316.0462818, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41bde545046cf5b290d7401ca3aa821b\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_41bde545046cf5b290d7401ca3aa821b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and solar_irradiance_w_m2 >= 0 and solar_irradiance_w_m2 <= 2000\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "solar_irradiance_w_m2", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 2000, "column_name": "solar_irradiance_w_m2", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT.4033c0965f": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_c19eb2c1954d1603fa8547d9b8946137.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT.4033c0965f", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT"], "alias": "dbt_expectations_expect_column_c19eb2c1954d1603fa8547d9b8946137", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c19eb2c1954d1603fa8547d9b8946137", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c19eb2c1954d1603fa8547d9b8946137"}, "created_at": 1748876316.0509994, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c19eb2c1954d1603fa8547d9b8946137\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_c19eb2c1954d1603fa8547d9b8946137.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SOLAR_IRRADIANCE_W_M2'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "solar_irradiance_w_m2", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "solar_irradiance_w_m2", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0.5d4f1577f0": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_dce908f11bfb4dc65f637ea66d85b294.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0.5d4f1577f0", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0"], "alias": "dbt_expectations_expect_column_dce908f11bfb4dc65f637ea66d85b294", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dce908f11bfb4dc65f637ea66d85b294", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_dce908f11bfb4dc65f637ea66d85b294"}, "created_at": 1748876316.054029, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dce908f11bfb4dc65f637ea66d85b294\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_dce908f11bfb4dc65f637ea66d85b294.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and uv_index >= 0 and uv_index <= 15\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "uv_index", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 15, "column_name": "uv_index", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT.5a59f008a6": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_d753b04fb0dce7cbad65199db1096591.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT.5a59f008a6", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT"], "alias": "dbt_expectations_expect_column_d753b04fb0dce7cbad65199db1096591", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d753b04fb0dce7cbad65199db1096591", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d753b04fb0dce7cbad65199db1096591"}, "created_at": 1748876316.058548, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d753b04fb0dce7cbad65199db1096591\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_d753b04fb0dce7cbad65199db1096591.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'UV_INDEX'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "uv_index", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "uv_index", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0.cb891d1321": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_58c738e7dc14f163a1b05ecc82dafdcd.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0.cb891d1321", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0"], "alias": "dbt_expectations_expect_column_58c738e7dc14f163a1b05ecc82dafdcd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58c738e7dc14f163a1b05ecc82dafdcd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_58c738e7dc14f163a1b05ecc82dafdcd"}, "created_at": 1748876316.062118, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58c738e7dc14f163a1b05ecc82dafdcd\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_58c738e7dc14f163a1b05ecc82dafdcd.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and sunshine_duration_minutes >= 0 and sunshine_duration_minutes <= 1440\n)\n as expression\n\n\n    from VELUX_DEV.MARTS.fct_readings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sunshine_duration_minutes", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 1440, "column_name": "sunshine_duration_minutes", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT.e409ed115c": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_5b5d7b4ef5b58208a1f2f38a0db098ec.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT.e409ed115c", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT"], "alias": "dbt_expectations_expect_column_5b5d7b4ef5b58208a1f2f38a0db098ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b5d7b4ef5b58208a1f2f38a0db098ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b5d7b4ef5b58208a1f2f38a0db098ec"}, "created_at": 1748876316.0661182, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b5d7b4ef5b58208a1f2f38a0db098ec\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_5b5d7b4ef5b58208a1f2f38a0db098ec.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SUNSHINE_DURATION_MINUTES'\n            and\n            relation_column_type not in ('FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sunshine_duration_minutes", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "sunshine_duration_minutes", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}, "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR.ef907bd31d": {"database": "VELUX_DEV", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR", "resource_type": "test", "package_name": "velux", "path": "dbt_expectations_expect_column_15e7f439a9d12c1765d1083e59c08aea.sql", "original_file_path": "models\\marts\\marts.yml", "unique_id": "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR.ef907bd31d", "fqn": ["velux", "marts", "dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR"], "alias": "dbt_expectations_expect_column_15e7f439a9d12c1765d1083e59c08aea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15e7f439a9d12c1765d1083e59c08aea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_15e7f439a9d12c1765d1083e59c08aea"}, "created_at": 1748876316.0696168, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15e7f439a9d12c1765d1083e59c08aea\") }}", "language": "sql", "refs": [{"name": "fct_readings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.velux.fct_readings"]}, "compiled_path": "target\\compiled\\velux\\models\\marts\\marts.yml\\dbt_expectations_expect_column_15e7f439a9d12c1765d1083e59c08aea.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('READING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TIME_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LOCATION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEVICE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENSOR_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTDOOR_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEW_POINT_TEMPERATURE_CELSIUS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEAN_SEA_LEVEL_PRESSURE_HPA' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('WIND_SPEED_MS' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VISIBILITY_KM' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SOLAR_IRRADIANCE_W_M2' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UV_INDEX' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUNSHINE_DURATION_MINUTES' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRECIPITATION_TYPE_DESCRIPTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRECIPITATION_TYPE_DESCRIPTION'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "precipitation_type_description", "file_key_name": "models.fct_readings", "attached_node": "model.velux.fct_readings", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "precipitation_type_description", "model": "{{ get_where_subquery(ref('fct_readings')) }}"}, "namespace": "dbt_expectations"}}}, "sources": {"source.velux.accuweather.TOP_CITY_HOURLY_METRIC": {"database": "SAMPLE_OF_ACCUWEATHERS_HISTORICAL_WEATHER_DATA", "schema": "HISTORICAL", "name": "TOP_CITY_HOURLY_METRIC", "resource_type": "source", "package_name": "velux", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.velux.accuweather.TOP_CITY_HOURLY_METRIC", "fqn": ["velux", "accuweather", "TOP_CITY_HOURLY_METRIC"], "source_name": "accuweather", "source_description": "", "loader": "", "identifier": "TOP_CITY_HOURLY_METRIC", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Source table for AccuWeather hourly weather metrics.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "SAMPLE_OF_ACCUWEATHERS_HISTORICAL_WEATHER_DATA.HISTORICAL.TOP_CITY_HOURLY_METRIC", "created_at": 1748873075.0925708, "unrendered_database": "SAMPLE_OF_ACCUWEATHERS_HISTORICAL_WEATHER_DATA", "unrendered_schema": "HISTORICAL"}, "source.velux.iot_data.iot_data": {"database": "velux_dev", "schema": "raw", "name": "iot_data", "resource_type": "source", "package_name": "velux", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.velux.iot_data.iot_data", "fqn": ["velux", "iot_data", "iot_data"], "source_name": "iot_data", "source_description": "", "loader": "", "identifier": "iot_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Source table for IoT data.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "velux_dev.raw.iot_data", "created_at": 1748873075.0941997, "unrendered_database": "velux_dev", "unrendered_schema": "raw"}}, "macros": {"macro.velux.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "velux", "path": "macros\\schema_handling.sql", "original_file_path": "macros\\schema_handling.sql", "unique_id": "macro.velux.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    \n    {%- if custom_schema_name is none -%}\n        {{ return(target.schema) }}\n    {%- else -%}\n        {{ return(custom_schema_name | trim) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7234728, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7280855, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7280855, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.729655, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7306232, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.731594, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n            dbt is currently configured to list a maximum of {{ max_total_results }} objects per schema.\n            {{ schema_relation }} exceeds this limit. If this is expected, you may configure this limit\n            by setting list_relations_per_page and list_relations_page_limit in your project flags.\n            It is recommended to start by increasing list_relations_page_limit to something more than the default of 10.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7333877, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n  {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {%- set sql -%}\n    {% if schema_relation is string %}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }};\n    {% else %}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }};\n    {% endif -%}\n\n    {# -- Gated for performance reason. If you don't want Iceberg, you shouldn't pay the\n       -- latency penalty. #}\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n      select all_objects.*, is_iceberg\n      from table(result_scan(last_query_id(-1))) all_objects\n      left join INFORMATION_SCHEMA.tables as all_tables\n        on all_tables.table_name = all_objects.\"name\"\n        and all_tables.table_schema = all_objects.\"schema_name\"\n        and all_tables.table_catalog = all_objects.\"database_name\"\n    {% endif -%}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7356591, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7356591, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.737193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.737193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7392287, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7392287, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7392287, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7392287, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7407646, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7417998, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7423332, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.74395, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7440968, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7440968, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.745136, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7466764, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7466764, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7477055, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7477055, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7477055, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7482405, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7482405, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7497737, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\metadata.sql", "original_file_path": "macros\\metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7508087, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7508087, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7508087, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.753036, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7562153, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7563176, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7573538, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7573538, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7613518, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to alter incremental model `\" ~ target_relation.identifier  ~ \"` to '\" ~ target_relation.table_format ~ \" table format due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in new table format.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7681568, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7681568, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7707257, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7707257, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7724268, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=config.get('table_format', 'default')\n    ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7745228, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7760563, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7770908, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7770908, "supported_languages": ["sql"]}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental\\insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7782433, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental\\insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7797532, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7817879, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.782482, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.782482, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7833564, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\incremental\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7847772, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7856557, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7861934, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7867272, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7867272, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.787763, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.787763, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\alter.sql", "original_file_path": "macros\\relations\\dynamic_table\\alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7897623, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7907593, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql": {"name": "_get_create_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.7917616, "supported_languages": null}, "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql": {"name": "_get_create_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake._get_create_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_create_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that creates a dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8397906, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\describe.sql", "original_file_path": "macros\\relations\\dynamic_table\\describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n--  Get all relevant metadata about a dynamic table\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A dictionary with one or two entries depending on whether iceberg is enabled:\n--      - dynamic_table: the metadata associated with a standard dynamic table\n--      - catalog: the metadata associated with the iceberg catalog\n-#}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\",\n            \"refresh_mode\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set results = {'dynamic_table': run_query(_dynamic_table_sql)} %}\n\n    {% if adapter.behavior.enable_iceberg_materializations.no_warn %}\n        {% set _ = results.update({'catalog': run_query(_get_describe_iceberg_catalog_sql(relation))}) %}\n    {% endif %}\n\n    {% do return(results) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake._get_describe_iceberg_catalog_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8418167, "supported_languages": null}, "macro.dbt_snowflake._get_describe_iceberg_catalog_sql": {"name": "_get_describe_iceberg_catalog_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\describe.sql", "original_file_path": "macros\\relations\\dynamic_table\\describe.sql", "unique_id": "macro.dbt_snowflake._get_describe_iceberg_catalog_sql", "macro_sql": "{% macro _get_describe_iceberg_catalog_sql(relation) %}\n{#-\n--  Produce DQL that returns all relevant metadata about an iceberg catalog\n--\n--  Args:\n--  - relation: SnowflakeRelation - the relation to describe\n--  Returns:\n--      A valid DQL statement that will return metadata associated with an iceberg catalog\n-#}\n    show iceberg tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"catalog_name\",\n        \"external_volume_name\",\n        \"base_location\"\n    from table(result_scan(last_query_id()))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8418167, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\drop.sql", "original_file_path": "macros\\relations\\dynamic_table\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8423548, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\refresh.sql", "original_file_path": "macros\\relations\\dynamic_table\\refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8423548, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic table with a new dynamic table\n--\n--  Args:\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Globals:\n--  - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if dynamic_table.catalog.table_format == 'iceberg' -%}\n        {{ _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {{ _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.844078, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql": {"name": "_get_replace_dynamic_standard_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_standard_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_standard_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a standard dynamic table with a new standard dynamic table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic standard table.\n-#}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.844078, "supported_languages": null}, "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql": {"name": "_get_replace_dynamic_iceberg_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake._get_replace_dynamic_iceberg_table_as_sql", "macro_sql": "{% macro _get_replace_dynamic_iceberg_table_as_sql(dynamic_table, relation, sql) -%}\n{#-\n--  Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n--\n--  This follows the syntax outlined here:\n--  https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n--\n--  Args:\n--  - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n--  - relation: Union[SnowflakeRelation, str]\n--      - SnowflakeRelation - required for relation.render()\n--      - str - is already the rendered relation name\n--  - sql: str - the code defining the model\n--  Returns:\n--      A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n    create or replace dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', dynamic_table.catalog.external_volume) }}\n        {{ optional('catalog', dynamic_table.catalog.name) }}\n        base_location = '{{ dynamic_table.catalog.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8451257, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n  {%- if relation.is_iceberg_format and not adapter.behavior.enable_iceberg_materializations.no_warn %}\n    {% do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') %}\n  {%- endif %}\n\n  {%- set materialization_prefix = relation.get_ddl_prefix_for_create(config.model.config, temporary) -%}\n  {%- set alter_prefix = relation.get_ddl_prefix_for_alter() -%}\n\n  {# Generate DDL/DML #}\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ materialization_prefix }} table {{ relation }}\n        {%- if relation.is_iceberg_format %}\n          {#\n            Valid DDL in CTAS statements. Plain create statements have a different order.\n            https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table\n          #}\n          {{ relation.get_iceberg_ddl_options(config.model.config) }}\n        {%- endif -%}\n\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter {{ alter_prefix }} table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary %}\n        alter {{ alter_prefix }} table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {%- if relation.is_iceberg_format %}\n      {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n    {%- endif %}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=relation.get_ddl_prefix_for_create(config.model.config, temporary)) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8499608, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8508549, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8508549, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8508549, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8538551, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8538551, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8559954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8564992, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8564992, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8564992, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.857503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.857503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8585029, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8585029, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\optional.sql", "original_file_path": "macros\\utils\\optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. string), leave blank if unnecessary (e.g. integer or bool)\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{% if value is not none %}{{ name }} = {{ quote_char }}{{ value }}{{ quote_char }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.859503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.859503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8605032, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8615026, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8615026, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8615026, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8615026, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8625035, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8636937, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8636937, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8636937, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8652275, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8652275, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8652275, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8652275, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8669002, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8669002, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.867801, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.867801, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8688023, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.869337, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8703718, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8703718, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8703718, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8732972, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8751655, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8751655, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8751655, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.87617, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.876706, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.876706, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8777401, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8792734, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8792734, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8792734, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8808134, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.881848, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.882473, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8835716, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8845985, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.885134, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8857875, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8857875, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8868225, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8868225, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8868225, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.887858, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.887858, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8888566, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8888566, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8888566, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.890857, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.890857, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.890857, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8918571, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8923912, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.892686, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8927646, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8927646, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8937988, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8939865, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8939865, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8939865, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.895017, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.895017, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.895017, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8960168, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8960168, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8960168, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8974102, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8974102, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8981113, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8981113, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.8981113, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.899686, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.900554, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.900554, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9015534, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.902557, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.902557, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9035912, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9037182, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9037182, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9037182, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9054487, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9059832, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9059832, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9066055, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9066055, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9066055, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.907559, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.907559, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9085615, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9085615, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.909559, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.909559, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.909559, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.910559, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.910559, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9115598, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9115598, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9115598, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9115598, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.912565, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.912565, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9137845, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9158156, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.916815, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9180405, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9195445, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9205472, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9205472, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9222522, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.923286, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.923474, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.923474, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9244945, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9244945, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9260285, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9260285, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9270627, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9275978, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9275978, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9275978, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.92923, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9297345, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.93074, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.93074, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9317398, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9317398, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9322696, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9347456, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9356186, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9361472, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9382071, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9382071, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9392104, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9429696, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9460375, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.947193, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.947193, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9513352, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9513352, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9523354, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9535713, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.954613, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.955647, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9561794, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9567134, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9644473, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9654472, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9671426, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9695559, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9705904, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.972131, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9722922, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.973354, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9743958, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9769344, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.97944, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9799795, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9822125, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9823775, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9823775, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.983487, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.983487, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.983487, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9845278, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9846919, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9846919, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9855626, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9855626, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9860973, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9860973, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9881659, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9897106, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9897106, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.990747, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.990747, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.991746, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.991746, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.991746, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9922814, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9922814, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9930427, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9930427, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.995911, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873072.9998522, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0028896, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0028896, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0028896, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0028896, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.004424, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0046551, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0048158, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0048158, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0107915, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0117953, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0128763, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0129998, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0140324, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0150304, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0150304, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0160306, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0170305, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.017565, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.017565, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0244334, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0244334, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.026977, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0296903, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0305886, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0305886, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0327377, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0328815, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0328815, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0356202, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0381951, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0381951, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0397298, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0397298, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0407653, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.044018, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0466309, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.047607, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0481422, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0498405, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0498405, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0517075, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0517075, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0529325, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.053963, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.053963, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.054963, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0558307, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0558307, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0567007, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0572355, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0572355, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0582702, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0592706, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0592706, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0592706, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0602698, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0602698, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.061271, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.061271, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0622697, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.063243, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0634506, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0634506, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0644813, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0644813, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.067222, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.067222, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0680935, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0690913, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0696285, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0696285, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0706627, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0706627, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0733147, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0734606, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0744905, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0744905, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0744905, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0761852, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0761852, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0761852, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0770612, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.078031, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.078031, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.078031, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.078031, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0790615, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0796201, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0796201, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0796201, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0811584, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.081699, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0825582, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0836475, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0844295, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0844295, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0849645, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.085501, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0856621, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0856621, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0856621, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0856621, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0856621, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0878143, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0878143, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0878143, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.08885, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.08985, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.08985, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.08985, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.08985, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0908499, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0908499, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0936725, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.093893, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.093893, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.0980577, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.098926, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1004615, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1004615, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1004615, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1019957, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1019957, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1019957, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1031811, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1031811, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1031811, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.104744, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1049151, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1049151, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.105751, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.106286, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.106286, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1068227, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1068227, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1068227, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1078603, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1088572, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1088572, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1088572, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.109857, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.109857, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.109857, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.109857, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1108575, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1108575, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1108575, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.111857, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.111857, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.111857, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.111857, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.111857, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1136615, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1136615, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1136615, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1146944, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1146944, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1156917, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1172352, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1172352, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1172352, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.11887, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.11887, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.11887, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1198063, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1198063, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1208038, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1208038, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1208038, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1208038, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.122499, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.122499, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1235683, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1235683, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1246066, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1246066, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1246066, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1246066, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1261408, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1261408, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1261408, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.127176, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.127176, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.128177, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.128177, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1291459, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.129827, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.129827, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.129827, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1306844, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1306844, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1306844, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1316843, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1322186, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1322186, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1322186, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1322186, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1344886, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1344886, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1350267, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1357317, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_all_columns.sql", "original_file_path": "macros\\compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.136765, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_all_columns.sql", "original_file_path": "macros\\compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.137799, "supported_languages": null}, "macro.audit_helper.compare_and_classify_query_results": {"name": "compare_and_classify_query_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_and_classify_query_results.sql", "original_file_path": "macros\\compare_and_classify_query_results.sql", "unique_id": "macro.audit_helper.compare_and_classify_query_results", "macro_sql": "{% macro compare_and_classify_query_results(a_query, b_query, primary_key_columns=[], columns=[], event_time=None, sample_limit=20) %}\n    \n    {% set columns = audit_helper._ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\n    {% set joined_cols = columns | join(\", \") %}\n\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\n    {% endif %}\n\n    with \n\n    {{ audit_helper._generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props)}}\n    \n    ,\n\n    all_records as (\n\n        select\n            *,\n            true as dbt_audit_in_a,\n            true as dbt_audit_in_b\n        from a_intersect_b\n\n        union all\n\n        select\n            *,\n            true as dbt_audit_in_a,\n            false as dbt_audit_in_b\n        from a_except_b\n\n        union all\n\n        select\n            *,\n            false as dbt_audit_in_a,\n            true as dbt_audit_in_b\n        from b_except_a\n\n    ),\n\n    classified as (\n        select \n            *,\n            {{ audit_helper._classify_audit_row_status() }} as dbt_audit_row_status\n        from all_records\n    ),\n\n    final as (\n        select \n            *,\n            {{ audit_helper._count_num_rows_in_status() }} as dbt_audit_num_rows_in_status,\n            -- using dense_rank so that modified rows (which have a full row for both the left and right side) both get picked up in the sample. \n            -- For every other type this is equivalent to a row_number()\n            dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key, dbt_audit_pk_row_num) as dbt_audit_sample_number\n        from classified\n    )\n\n    select * from final\n    {% if sample_limit %}\n        where dbt_audit_sample_number <= {{ sample_limit }}\n    {% endif %}\n    order by dbt_audit_row_status, dbt_audit_sample_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._ensure_all_pks_are_in_column_set", "macro.audit_helper._get_comparison_bounds", "macro.audit_helper._generate_set_results", "macro.audit_helper._classify_audit_row_status", "macro.audit_helper._count_num_rows_in_status"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1398726, "supported_languages": null}, "macro.audit_helper.compare_and_classify_relation_rows": {"name": "compare_and_classify_relation_rows", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_and_classify_relation_rows.sql", "original_file_path": "macros\\compare_and_classify_relation_rows.sql", "unique_id": "macro.audit_helper.compare_and_classify_relation_rows", "macro_sql": "{% macro compare_and_classify_relation_rows(a_relation, b_relation, primary_key_columns=[], columns=None, event_time=None, sample_limit=20) %}\n    {%- if not columns -%}\n        {%- set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) -%}\n    {%- endif -%}\n\n    {{ \n        audit_helper.compare_and_classify_query_results(\n            \"select * from \" ~ a_relation,\n            \"select * from \" ~ b_relation,\n            primary_key_columns,\n            columns,\n            event_time,\n            sample_limit\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_intersecting_columns_from_relations", "macro.audit_helper.compare_and_classify_query_results"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1398726, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values.sql", "original_file_path": "macros\\compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis=True, a_relation_name='a', b_relation_name='b') -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.141911, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values.sql", "original_file_path": "macros\\compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '{% if emojis %}\u2705: {% endif %}perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '{% if emojis %}\u2705: {% endif %}both are null'\n            when a_query.{{ primary_key }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}missing from {{ a_relation_name }}'\n            when b_query.{{ primary_key }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}missing from {{ b_relation_name }}'\n            when a_query.{{ column_to_compare }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}value is null in {{ a_relation_name }} only'\n            when b_query.{{ column_to_compare }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}value is null in {{ b_relation_name }} only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '{% if emojis %}\u274c: {% endif %}\u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.144068, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values_verbose.sql", "original_file_path": "macros\\compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1441896, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_column_values_verbose.sql", "original_file_path": "macros\\compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1459265, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_queries.sql", "original_file_path": "macros\\compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize, limit)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.146801, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_queries.sql", "original_file_path": "macros\\compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n{%- if limit and not summarize %}\nlimit {{ limit }}\n{%- endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1478035, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relations.sql", "original_file_path": "macros\\compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true, limit=None) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize, limit) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1498456, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1504366, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match,\n    a_cols.data_type is not null and b_cols.data_type is null as in_a_only,\n    b_cols.data_type is not null and a_cols.data_type is null as in_b_only,\n    b_cols.data_type is not null and a_cols.data_type is not null as in_both\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1504366, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.snowflake__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1514711, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1514711, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1525528, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1526968, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1526968, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_relation_columns.sql", "original_file_path": "macros\\compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1537273, "supported_languages": null}, "macro.audit_helper.compare_row_counts": {"name": "compare_row_counts", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_row_counts.sql", "original_file_path": "macros\\compare_row_counts.sql", "unique_id": "macro.audit_helper.compare_row_counts", "macro_sql": "{% macro compare_row_counts(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_row_counts', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_row_counts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1537273, "supported_languages": null}, "macro.audit_helper.default__compare_row_counts": {"name": "default__compare_row_counts", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_row_counts.sql", "original_file_path": "macros\\compare_row_counts.sql", "unique_id": "macro.audit_helper.default__compare_row_counts", "macro_sql": "{% macro default__compare_row_counts(a_relation, b_relation) %}\n\n        select\n            '{{ a_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ a_relation }}\n\n        union all\n\n        select\n            '{{ b_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ b_relation }}\n  \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1547287, "supported_languages": null}, "macro.audit_helper.compare_which_query_columns_differ": {"name": "compare_which_query_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_which_query_columns_differ.sql", "original_file_path": "macros\\compare_which_query_columns_differ.sql", "unique_id": "macro.audit_helper.compare_which_query_columns_differ", "macro_sql": "{% macro compare_which_query_columns_differ(a_query, b_query, primary_key_columns=[], columns=[], event_time=None) %}\n    {{ return(adapter.dispatch('compare_which_query_columns_differ', 'audit_helper')(a_query, b_query, primary_key_columns, columns, event_time)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_which_query_columns_differ"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1557975, "supported_languages": null}, "macro.audit_helper.default__compare_which_query_columns_differ": {"name": "default__compare_which_query_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_which_query_columns_differ.sql", "original_file_path": "macros\\compare_which_query_columns_differ.sql", "unique_id": "macro.audit_helper.default__compare_which_query_columns_differ", "macro_sql": "{% macro default__compare_which_query_columns_differ(a_query, b_query, primary_key_columns, columns, event_time) %}\n    {% set columns = audit_helper._ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(event_time) %}\n    {% endif %}\n\n    {% set joined_cols = columns | join (\", \") %}\n\n        with a as (\n            select \n                {{ joined_cols }},\n                {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n            from ({{ a_query }}) as a_subq\n            {{ audit_helper.event_time_filter(event_time_props) }}\n        ),\n        b as (\n            select \n                {{ joined_cols }},\n                {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n            from ({{ b_query }}) as b_subq\n            {{ audit_helper.event_time_filter(event_time_props) }}\n        ),\n\n        calculated as (\n            select \n                {% for column in columns %}\n                    {% set quoted_column = adapter.quote(column) %}\n                    {% set compare_statement %}\n                        (\n                            (a.{{ quoted_column }} != b.{{ quoted_column }})\n                            or (a.{{ quoted_column }} is null and b.{{ quoted_column }} is not null)\n                            or (a.{{ quoted_column }} is not null and b.{{ quoted_column }} is null)\n                        )\n                    {% endset %}\n                \n                {{ dbt.bool_or(compare_statement) }} as {{ column | lower }}_has_difference\n\n                {%- if not loop.last %}, {% endif %}\n                {% endfor %}\n            from a\n            inner join b on a.dbt_audit_surrogate_key = b.dbt_audit_surrogate_key\n        )\n\n    {% for column in columns %}\n    \n    select \n        '{{ column }}' as column_name, \n        {{ column | lower }}_has_difference as has_difference\n    \n    from calculated\n\n    {% if not loop.last %}\n        \n    union all \n\n    {% endif %}\n\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._ensure_all_pks_are_in_column_set", "macro.audit_helper._get_comparison_bounds", "macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter", "macro.dbt.bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1575315, "supported_languages": null}, "macro.audit_helper.compare_which_relation_columns_differ": {"name": "compare_which_relation_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\compare_which_relation_columns_differ.sql", "original_file_path": "macros\\compare_which_relation_columns_differ.sql", "unique_id": "macro.audit_helper.compare_which_relation_columns_differ", "macro_sql": "{% macro compare_which_relation_columns_differ(a_relation, b_relation, primary_key_columns=[], columns=[], event_time=None) %}\n    {%- if not columns -%}\n        {%- set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) -%}\n    {%- endif -%}\n\n    {{ \n        audit_helper.compare_which_query_columns_differ(\n            \"select * from \" ~ a_relation,\n            \"select * from \" ~ b_relation,\n            primary_key_columns,\n            columns,\n            event_time\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_intersecting_columns_from_relations", "macro.audit_helper.compare_which_query_columns_differ"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1585305, "supported_languages": null}, "macro.audit_helper.quick_are_queries_identical": {"name": "quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\quick_are_queries_identical.sql", "original_file_path": "macros\\quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.quick_are_queries_identical", "macro_sql": "{% macro quick_are_queries_identical(query_a, query_b, columns=[], event_time=None) %}\n    {{ return (adapter.dispatch('quick_are_queries_identical', 'audit_helper')(query_a, query_b, columns, event_time)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.snowflake__quick_are_queries_identical"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1585305, "supported_languages": null}, "macro.audit_helper.default__quick_are_queries_identical": {"name": "default__quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\quick_are_queries_identical.sql", "original_file_path": "macros\\quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.default__quick_are_queries_identical", "macro_sql": "{% macro default__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\n    {% if execute %}\n        {# Need to only throw this error when the macro is actually trying to be used, not during intial parse phase #}\n        {# if/when unit tests get support for `enabled` config, this check can be removed as they won't be supplied for parse anyway #}\n        {% do exceptions.raise_compiler_error(\"quick_are_queries_identical() is not implemented for adapter '\"~ target.type ~ \"'\" ) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.160065, "supported_languages": null}, "macro.audit_helper.bigquery__quick_are_queries_identical": {"name": "bigquery__quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\quick_are_queries_identical.sql", "original_file_path": "macros\\quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.bigquery__quick_are_queries_identical", "macro_sql": "{% macro bigquery__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\n    {% set joined_cols = columns | join(\", \") %}\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\n    {% endif %}\n\n    with query_a as (\n        select {{ joined_cols }}\n        from ({{ query_a }})\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ), \n    query_b as (\n        select {{ joined_cols }}\n        from ({{ query_b }})\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    )\n\n    select count(distinct hash_result) = 1 as are_tables_identical\n    from (\n        select bit_xor(farm_fingerprint(to_json_string(query_a))) as hash_result\n        from query_a\n\n        union all\n        \n        select bit_xor(farm_fingerprint(to_json_string(query_b))) as hash_result\n        from query_b\n    ) as hashes\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_comparison_bounds", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1610994, "supported_languages": null}, "macro.audit_helper.snowflake__quick_are_queries_identical": {"name": "snowflake__quick_are_queries_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\quick_are_queries_identical.sql", "original_file_path": "macros\\quick_are_queries_identical.sql", "unique_id": "macro.audit_helper.snowflake__quick_are_queries_identical", "macro_sql": "{% macro snowflake__quick_are_queries_identical(query_a, query_b, columns, event_time) %}\n    {% set joined_cols = columns | join(\", \") %}\n    {% if event_time %}\n        {% set event_time_props = audit_helper._get_comparison_bounds(a_query, b_query, event_time) %}\n    {% endif %}\n\n    select count(distinct hash_result) = 1 as are_tables_identical\n    from (\n        select hash_agg({{ joined_cols }}) as hash_result\n        from ({{ query_a }}) query_a_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n\n        union all\n        \n        select hash_agg({{ joined_cols }}) as hash_result\n        from ({{ query_b }}) query_b_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n\n    ) as hashes\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_comparison_bounds", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1610994, "supported_languages": null}, "macro.audit_helper.quick_are_relations_identical": {"name": "quick_are_relations_identical", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\quick_are_relations_identical.sql", "original_file_path": "macros\\quick_are_relations_identical.sql", "unique_id": "macro.audit_helper.quick_are_relations_identical", "macro_sql": "{% macro quick_are_relations_identical(a_relation, b_relation, columns=None, event_time=None) %}\n    {% if not columns %}\n        {% set columns = audit_helper._get_intersecting_columns_from_relations(a_relation, b_relation) %}\n    {% endif %}\n\n    {{\n        audit_helper.quick_are_queries_identical(\n            \"select * from \" ~ a_relation,\n            \"select * from \" ~ b_relation,\n            columns, \n            event_time\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._get_intersecting_columns_from_relations", "macro.audit_helper.quick_are_queries_identical"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1620994, "supported_languages": null}, "macro.audit_helper._classify_audit_row_status": {"name": "_classify_audit_row_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_classify_audit_row_status.sql", "original_file_path": "macros\\utils\\_classify_audit_row_status.sql", "unique_id": "macro.audit_helper._classify_audit_row_status", "macro_sql": "{% macro _classify_audit_row_status() %}\n    {{ return(adapter.dispatch('_classify_audit_row_status', 'audit_helper')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default___classify_audit_row_status"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1633403, "supported_languages": null}, "macro.audit_helper.default___classify_audit_row_status": {"name": "default___classify_audit_row_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_classify_audit_row_status.sql", "original_file_path": "macros\\utils\\_classify_audit_row_status.sql", "unique_id": "macro.audit_helper.default___classify_audit_row_status", "macro_sql": "\n\n{%- macro default___classify_audit_row_status() -%}\n    case \n        when max(dbt_audit_pk_row_num) over (partition by dbt_audit_surrogate_key) > 1 then 'nonunique_pk'\n        when dbt_audit_in_a and dbt_audit_in_b then 'identical'\n        when {{ dbt.bool_or('dbt_audit_in_a') }} over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) \n            and {{ dbt.bool_or('dbt_audit_in_b') }} over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num)\n            then 'modified'\n        when dbt_audit_in_a then 'removed'\n        when dbt_audit_in_b then 'added'\n    end\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1633403, "supported_languages": null}, "macro.audit_helper.redshift___classify_audit_row_status": {"name": "redshift___classify_audit_row_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_classify_audit_row_status.sql", "original_file_path": "macros\\utils\\_classify_audit_row_status.sql", "unique_id": "macro.audit_helper.redshift___classify_audit_row_status", "macro_sql": "\n\n\n{%- macro redshift___classify_audit_row_status() -%}\n    {#- Redshift doesn't support bitwise operations (e.g. bool_or) inside of a window function :( -#}\n    case \n        when max(dbt_audit_pk_row_num) over (partition by dbt_audit_surrogate_key) > 1 then 'nonunique_pk'\n        when dbt_audit_in_a and dbt_audit_in_b then 'identical'\n        when max(case when dbt_audit_in_a then 1 else 0 end) over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) = 1\n            and max(case when dbt_audit_in_b then 1 else 0 end) over (partition by dbt_audit_surrogate_key, dbt_audit_pk_row_num) = 1\n            then 'modified'\n        when dbt_audit_in_a then 'removed'\n        when dbt_audit_in_b then 'added'\n    end{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1633403, "supported_languages": null}, "macro.audit_helper._count_num_rows_in_status": {"name": "_count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_count_num_rows_in_status.sql", "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper._count_num_rows_in_status", "macro_sql": "{% macro _count_num_rows_in_status() %}\n    {{ return(adapter.dispatch('_count_num_rows_in_status', 'audit_helper')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default___count_num_rows_in_status"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1643708, "supported_languages": null}, "macro.audit_helper.default___count_num_rows_in_status": {"name": "default___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_count_num_rows_in_status.sql", "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.default___count_num_rows_in_status", "macro_sql": "\n\n{%- macro default___count_num_rows_in_status() -%}\n    count(distinct dbt_audit_surrogate_key, dbt_audit_pk_row_num) over (partition by dbt_audit_row_status)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1643708, "supported_languages": null}, "macro.audit_helper.bigquery___count_num_rows_in_status": {"name": "bigquery___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_count_num_rows_in_status.sql", "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.bigquery___count_num_rows_in_status", "macro_sql": "\n\n{%- macro bigquery___count_num_rows_in_status() -%}\n    count(distinct {{ dbt.concat([\"dbt_audit_surrogate_key\", \"dbt_audit_pk_row_num\"]) }}) over (partition by dbt_audit_row_status)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1643708, "supported_languages": null}, "macro.audit_helper.postgres___count_num_rows_in_status": {"name": "postgres___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_count_num_rows_in_status.sql", "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.postgres___count_num_rows_in_status", "macro_sql": "\n\n{%- macro postgres___count_num_rows_in_status() -%}\n    {{ audit_helper._count_num_rows_in_status_without_distinct_window_func() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._count_num_rows_in_status_without_distinct_window_func"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1643708, "supported_languages": null}, "macro.audit_helper.databricks___count_num_rows_in_status": {"name": "databricks___count_num_rows_in_status", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_count_num_rows_in_status.sql", "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper.databricks___count_num_rows_in_status", "macro_sql": "\n\n{%- macro databricks___count_num_rows_in_status() -%}\n    {{ audit_helper._count_num_rows_in_status_without_distinct_window_func() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._count_num_rows_in_status_without_distinct_window_func"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1653728, "supported_languages": null}, "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func": {"name": "_count_num_rows_in_status_without_distinct_window_func", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_count_num_rows_in_status.sql", "original_file_path": "macros\\utils\\_count_num_rows_in_status.sql", "unique_id": "macro.audit_helper._count_num_rows_in_status_without_distinct_window_func", "macro_sql": "{% macro _count_num_rows_in_status_without_distinct_window_func() %}\n    {#- Some platforms don't support count(distinct) inside of window functions -#}\n    {#- You can get the same outcome by dense_rank, assuming no nulls (we've already handled that) #}\n    {# https://stackoverflow.com/a/22347502 -#}\n    dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key, dbt_audit_pk_row_num)\n    + dense_rank() over (partition by dbt_audit_row_status order by dbt_audit_surrogate_key desc, dbt_audit_pk_row_num desc)\n    - 1\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1653728, "supported_languages": null}, "macro.audit_helper._ensure_all_pks_are_in_column_set": {"name": "_ensure_all_pks_are_in_column_set", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_ensure_all_pks_are_in_column_set.sql", "original_file_path": "macros\\utils\\_ensure_all_pks_are_in_column_set.sql", "unique_id": "macro.audit_helper._ensure_all_pks_are_in_column_set", "macro_sql": "{% macro _ensure_all_pks_are_in_column_set(primary_key_columns, columns) %}\n    {% set lower_cols = columns | map('lower') | list %}\n    {% set missing_pks = [] %}\n\n    {% for pk in primary_key_columns %}\n        {% if pk | lower not in lower_cols %}\n            {% do missing_pks.append(pk) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if missing_pks | length > 0 %}\n        {% set columns = missing_pks + columns %}\n    {% endif %}\n    \n    {% do return (columns) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1669111, "supported_languages": null}, "macro.audit_helper._generate_null_safe_surrogate_key": {"name": "_generate_null_safe_surrogate_key", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_null_safe_sk.sql", "original_file_path": "macros\\utils\\_generate_null_safe_sk.sql", "unique_id": "macro.audit_helper._generate_null_safe_surrogate_key", "macro_sql": "\n\n{%- macro _generate_null_safe_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('_generate_null_safe_surrogate_key', 'audit_helper')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default___generate_null_safe_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.167083, "supported_languages": null}, "macro.audit_helper.default___generate_null_safe_surrogate_key": {"name": "default___generate_null_safe_surrogate_key", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_null_safe_sk.sql", "original_file_path": "macros\\utils\\_generate_null_safe_sk.sql", "unique_id": "macro.audit_helper.default___generate_null_safe_surrogate_key", "macro_sql": "\n\n{%- macro default___generate_null_safe_surrogate_key(field_list) -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '_dbt_audit_helper_surrogate_key_null_')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1679454, "supported_languages": null}, "macro.audit_helper._generate_set_results": {"name": "_generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_set_results.sql", "original_file_path": "macros\\utils\\_generate_set_results.sql", "unique_id": "macro.audit_helper._generate_set_results", "macro_sql": "{% macro _generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props=None) %}\n  {{ return(adapter.dispatch('_generate_set_results', 'audit_helper')(a_query, b_query, primary_key_columns, columns, event_time_props)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.snowflake___generate_set_results"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1689456, "supported_languages": null}, "macro.audit_helper.default___generate_set_results": {"name": "default___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_set_results.sql", "original_file_path": "macros\\utils\\_generate_set_results.sql", "unique_id": "macro.audit_helper.default___generate_set_results", "macro_sql": "{% macro default___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set joined_cols = columns | join(\", \") %}\n\n    a_base as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n        from ( {{-  a_query  -}} ) a_base_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    b_base as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key\n        from ( {{-  b_query  -}} ) b_base_subq\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a as (\n        select \n            *, \n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key) as dbt_audit_pk_row_num\n        from a_base\n    ),\n\n    b as (\n        select \n            *, \n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key) as dbt_audit_pk_row_num\n        from b_base\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        {{ dbt.intersect() }}\n        select * from b\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        {{ dbt.except() }}\n        select * from b\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        {{ dbt.except() }}\n        select * from a\n\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter", "macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1707106, "supported_languages": null}, "macro.audit_helper.bigquery___generate_set_results": {"name": "bigquery___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_set_results.sql", "original_file_path": "macros\\utils\\_generate_set_results.sql", "unique_id": "macro.audit_helper.bigquery___generate_set_results", "macro_sql": "{% macro bigquery___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set joined_cols = columns | join(\", \") %}\n    {% set surrogate_key = audit_helper._generate_null_safe_surrogate_key(primary_key_columns) %}\n    subset_columns_a as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num\n        from ( {{-  a_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    subset_columns_b as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num\n        from ( {{-  b_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a as (\n        select\n            *,\n            farm_fingerprint(to_json_string(subset_columns_a)) as dbt_audit_row_hash\n        from subset_columns_a\n    ), \n\n    b as (\n        select\n            *,\n            farm_fingerprint(to_json_string(subset_columns_b)) as dbt_audit_row_hash\n        from subset_columns_b\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\n\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1707106, "supported_languages": null}, "macro.audit_helper.databricks___generate_set_results": {"name": "databricks___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_set_results.sql", "original_file_path": "macros\\utils\\_generate_set_results.sql", "unique_id": "macro.audit_helper.databricks___generate_set_results", "macro_sql": "{% macro databricks___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set cast_columns = [] %}\n    {# Map types can't be compared by default (you need to opt in to a legacy behaviour flag) #}\n    {# so everything needs to be cast as a string first :( #}\n    {% for col in columns %}\n        {% do cast_columns.append(dbt.cast(col, api.Column.translate_type(\"string\"))) %}\n    {% endfor %}\n    {% set joined_cols = cast_columns | join(\", \") %}\n    {% set surrogate_key = audit_helper._generate_null_safe_surrogate_key(primary_key_columns) %}\n    a as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num,\n            xxhash64({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  a_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    b as (\n        select \n            {{ joined_cols }}, \n            {{ surrogate_key }} as dbt_audit_surrogate_key,\n            row_number() over (partition by {{ surrogate_key }} order by 1 ) as dbt_audit_pk_row_num,\n            xxhash64({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  b_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\n\n    )   \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast", "macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.173377, "supported_languages": null}, "macro.audit_helper.snowflake___generate_set_results": {"name": "snowflake___generate_set_results", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_generate_set_results.sql", "original_file_path": "macros\\utils\\_generate_set_results.sql", "unique_id": "macro.audit_helper.snowflake___generate_set_results", "macro_sql": "{% macro snowflake___generate_set_results(a_query, b_query, primary_key_columns, columns, event_time_props) %}\n    {% set joined_cols = columns | join(\", \") %}\n    a as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key,\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key ) as dbt_audit_pk_row_num,\n            hash({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  a_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    b as (\n        select \n            {{ joined_cols }}, \n            {{ audit_helper._generate_null_safe_surrogate_key(primary_key_columns) }} as dbt_audit_surrogate_key,\n            row_number() over (partition by dbt_audit_surrogate_key order by dbt_audit_surrogate_key ) as dbt_audit_pk_row_num,\n            hash({{ joined_cols }}, dbt_audit_pk_row_num) as dbt_audit_row_hash\n        from ( {{-  b_query  -}} )\n        {{ audit_helper.event_time_filter(event_time_props) }}\n    ),\n\n    a_intersect_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    a_except_b as (\n\n        select * from a\n        where a.dbt_audit_row_hash not in (select b.dbt_audit_row_hash from b)\n\n    ),\n\n    b_except_a as (\n\n        select * from b\n        where b.dbt_audit_row_hash not in (select a.dbt_audit_row_hash from a)\n\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper._generate_null_safe_surrogate_key", "macro.audit_helper.event_time_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1734858, "supported_languages": null}, "macro.audit_helper._get_comparison_bounds": {"name": "_get_comparison_bounds", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_get_comparison_bounds.sql", "original_file_path": "macros\\utils\\_get_comparison_bounds.sql", "unique_id": "macro.audit_helper._get_comparison_bounds", "macro_sql": "{% macro _get_comparison_bounds(a_query, b_query, event_time) %}\n    {% set min_max_queries %}\n        with min_maxes as (\n            select min({{ event_time }}) as min_event_time, max({{ event_time }}) as max_event_time\n            from ({{ a_query }}) a_subq\n            union all \n            select min({{ event_time }}) as min_event_time, max({{ event_time }}) as max_event_time\n            from ({{ b_query }}) b_subq\n        )\n        select max(min_event_time) as min_event_time, min(max_event_time) as max_event_time\n        from min_maxes\n    {% endset %}\n\n    {% set query_response = dbt_utils.get_query_results_as_dict(min_max_queries) %}\n    \n    {% set event_time_props = {\"event_time\": event_time} %}\n    \n    {# query_response.keys() are only `min_event_time` and `max_event_time`, but they have indeterminate capitalisation #}\n    {# hence the dynamic approach for what is otherwise just two well-known values #}\n    {% for k in query_response.keys() %}\n        {% do event_time_props.update({k | lower: query_response[k][0]}) %}\n    {% endfor %}\n    \n    {% do return(event_time_props) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.174524, "supported_languages": null}, "macro.audit_helper.event_time_filter": {"name": "event_time_filter", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_get_comparison_bounds.sql", "original_file_path": "macros\\utils\\_get_comparison_bounds.sql", "unique_id": "macro.audit_helper.event_time_filter", "macro_sql": "{% macro event_time_filter(event_time_props) %}\n    {% if event_time_props %}\n        where {{ event_time_props[\"event_time\"] }} >= '{{ event_time_props[\"min_event_time\"] }}'\n        and {{ event_time_props[\"event_time\"] }} <= '{{ event_time_props[\"max_event_time\"] }}'\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1761544, "supported_languages": null}, "macro.audit_helper._get_intersecting_columns_from_relations": {"name": "_get_intersecting_columns_from_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros\\utils\\_get_intersecting_columns_from_relations.sql", "original_file_path": "macros\\utils\\_get_intersecting_columns_from_relations.sql", "unique_id": "macro.audit_helper._get_intersecting_columns_from_relations", "macro_sql": "{% macro _get_intersecting_columns_from_relations(a_relation, b_relation) %}        \n    {%- set a_cols = dbt_utils.get_filtered_columns_in_relation(a_relation) -%}\n    {%- set b_cols = dbt_utils.get_filtered_columns_in_relation(b_relation) -%}\n    \n    {%- set intersection = [] -%}\n    {%- for col in a_cols -%}\n        {%- if col in b_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {% do return(intersection) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1770985, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(\n    start_date=None, end_date=None, n_dateparts=None, datepart=\"day\"\n) %}\n    {{\n        adapter.dispatch(\"get_base_dates\", \"dbt_date\")(\n            start_date, end_date, n_dateparts, datepart\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1781023, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n    {%- if start_date and end_date -%}\n        {%- set start_date = (\n            \"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n        {%- set end_date = (\n            \"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n\n    {%- elif n_dateparts and datepart -%}\n\n        {%- set start_date = dbt.dateadd(\n            datepart, -1 * n_dateparts, dbt_date.today()\n        ) -%}\n        {%- set end_date = dbt_date.tomorrow() -%}\n    {%- endif -%}\n\n    with\n        date_spine as (\n\n            {{\n                dbt_date.date_spine(\n                    datepart=datepart,\n                    start_date=start_date,\n                    end_date=end_date,\n                )\n            }}\n\n        )\n    select\n        cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\n    from date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1798668, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n    {%- if start_date and end_date -%}\n        {%- set start_date = \"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n        {%- set end_date = \"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n    {%- elif n_dateparts and datepart -%}\n\n        {%- set start_date = dbt.dateadd(\n            datepart, -1 * n_dateparts, dbt_date.today()\n        ) -%}\n        {%- set end_date = dbt_date.tomorrow() -%}\n    {%- endif -%}\n\n    with\n        date_spine as (\n\n            {{\n                dbt_date.date_spine(\n                    datepart=datepart,\n                    start_date=start_date,\n                    end_date=end_date,\n                )\n            }}\n\n        )\n    select\n        cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\n    from date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1813042, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n    {%- if start_date and end_date -%}\n        {%- set start_date = (\n            \"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n        {%- set end_date = (\n            \"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n\n    {%- elif n_dateparts and datepart -%}\n\n        {%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n        {%- set end_date = dbt_date.tomorrow() -%}\n    {%- endif -%}\n\n    with\n        date_spine as (\n\n            {{\n                dbt_date.date_spine(\n                    datepart=datepart,\n                    start_date=start_date,\n                    end_date=end_date,\n                )\n            }}\n\n        )\n    select\n        cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\n    from date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1826265, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch(\"get_date_dimension\", \"dbt_date\")(start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1837726, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\n    with\n        base_dates as ({{ dbt_date.get_base_dates(start_date, end_date) }}),\n        dates_with_prior_year_dates as (\n\n            select\n                cast(d.date_day as date) as date_day,\n                cast(\n                    {{ dbt.dateadd(\"year\", -1, \"d.date_day\") }} as date\n                ) as prior_year_date_day,\n                cast(\n                    {{ dbt.dateadd(\"day\", -364, \"d.date_day\") }} as date\n                ) as prior_year_over_year_date_day\n            from base_dates d\n\n        )\n    select\n        d.date_day,\n        {{ dbt_date.yesterday(\"d.date_day\") }} as prior_date_day,\n        {{ dbt_date.tomorrow(\"d.date_day\") }} as next_date_day,\n        d.prior_year_date_day as prior_year_date_day,\n        d.prior_year_over_year_date_day,\n        {{ dbt_date.day_of_week(\"d.date_day\", isoweek=false) }} as day_of_week,\n        {{ dbt_date.day_of_week(\"d.date_day\", isoweek=true) }} as day_of_week_iso,\n        {{ dbt_date.day_name(\"d.date_day\", short=false) }} as day_of_week_name,\n        {{ dbt_date.day_name(\"d.date_day\", short=true) }} as day_of_week_name_short,\n        {{ dbt_date.day_of_month(\"d.date_day\") }} as day_of_month,\n        {{ dbt_date.day_of_year(\"d.date_day\") }} as day_of_year,\n\n        {{ dbt_date.week_start(\"d.date_day\") }} as week_start_date,\n        {{ dbt_date.week_end(\"d.date_day\") }} as week_end_date,\n        {{ dbt_date.week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_start_date,\n        {{ dbt_date.week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_end_date,\n        {{ dbt_date.week_of_year(\"d.date_day\") }} as week_of_year,\n\n        {{ dbt_date.iso_week_start(\"d.date_day\") }} as iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.date_day\") }} as iso_week_end_date,\n        {{ dbt_date.iso_week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_end_date,\n        {{ dbt_date.iso_week_of_year(\"d.date_day\") }} as iso_week_of_year,\n        {{ dbt_date.iso_year_week(\"d.date_day\") }} as iso_year_week,\n\n        {{ dbt_date.week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_of_year,\n        {{ dbt_date.iso_week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_of_year,\n\n        cast(\n            {{ dbt_date.date_part(\"month\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as month_of_year,\n        {{ dbt_date.month_name(\"d.date_day\", short=false) }} as month_name,\n        {{ dbt_date.month_name(\"d.date_day\", short=true) }} as month_name_short,\n\n        cast({{ dbt.date_trunc(\"month\", \"d.date_day\") }} as date) as month_start_date,\n        cast({{ last_day(\"d.date_day\", \"month\") }} as date) as month_end_date,\n\n        cast(\n            {{ dbt.date_trunc(\"month\", \"d.prior_year_date_day\") }} as date\n        ) as prior_year_month_start_date,\n        cast(\n            {{ last_day(\"d.prior_year_date_day\", \"month\") }} as date\n        ) as prior_year_month_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"quarter\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as quarter_of_year,\n        cast(\n            {{ dbt.date_trunc(\"quarter\", \"d.date_day\") }} as date\n        ) as quarter_start_date,\n        cast({{ last_day(\"d.date_day\", \"quarter\") }} as date) as quarter_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"year\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as year_number,\n        cast({{ dbt.date_trunc(\"year\", \"d.date_day\") }} as date) as year_start_date,\n        cast({{ last_day(\"d.date_day\", \"year\") }} as date) as year_end_date\n    from dates_with_prior_year_dates d\n    order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.iso_year_week", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1884432, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\n    with\n        base_dates as ({{ dbt_date.get_base_dates(start_date, end_date) }}),\n        dates_with_prior_year_dates as (\n\n            select\n                cast(d.date_day as date) as date_day,\n                cast(\n                    {{ dbt.dateadd(\"year\", -1, \"d.date_day\") }} as date\n                ) as prior_year_date_day,\n                cast(\n                    {{ dbt.dateadd(\"day\", -364, \"d.date_day\") }} as date\n                ) as prior_year_over_year_date_day\n            from base_dates d\n\n        )\n    select\n        d.date_day,\n        {{ dbt_date.yesterday(\"d.date_day\") }} as prior_date_day,\n        {{ dbt_date.tomorrow(\"d.date_day\") }} as next_date_day,\n        d.prior_year_date_day as prior_year_date_day,\n        d.prior_year_over_year_date_day,\n        {{ dbt_date.day_of_week(\"d.date_day\", isoweek=true) }} as day_of_week,\n\n        {{ dbt_date.day_name(\"d.date_day\", short=false) }} as day_of_week_name,\n        {{ dbt_date.day_name(\"d.date_day\", short=true) }} as day_of_week_name_short,\n        {{ dbt_date.day_of_month(\"d.date_day\") }} as day_of_month,\n        {{ dbt_date.day_of_year(\"d.date_day\") }} as day_of_year,\n\n        {{ dbt_date.week_start(\"d.date_day\") }} as week_start_date,\n        {{ dbt_date.week_end(\"d.date_day\") }} as week_end_date,\n        {{ dbt_date.week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_start_date,\n        {{ dbt_date.week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_end_date,\n        {{ dbt_date.week_of_year(\"d.date_day\") }} as week_of_year,\n\n        {{ dbt_date.iso_week_start(\"d.date_day\") }} as iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.date_day\") }} as iso_week_end_date,\n        {{ dbt_date.iso_week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_end_date,\n        {{ dbt_date.iso_week_of_year(\"d.date_day\") }} as iso_week_of_year,\n\n        {{ dbt_date.week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_of_year,\n        {{ dbt_date.iso_week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_of_year,\n\n        cast(\n            {{ dbt_date.date_part(\"month\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as month_of_year,\n        {{ dbt_date.month_name(\"d.date_day\", short=false) }} as month_name,\n        {{ dbt_date.month_name(\"d.date_day\", short=true) }} as month_name_short,\n\n        cast({{ dbt.date_trunc(\"month\", \"d.date_day\") }} as date) as month_start_date,\n        cast({{ last_day(\"d.date_day\", \"month\") }} as date) as month_end_date,\n\n        cast(\n            {{ dbt.date_trunc(\"month\", \"d.prior_year_date_day\") }} as date\n        ) as prior_year_month_start_date,\n        cast(\n            {{ last_day(\"d.prior_year_date_day\", \"month\") }} as date\n        ) as prior_year_month_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"quarter\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as quarter_of_year,\n        cast(\n            {{ dbt.date_trunc(\"quarter\", \"d.date_day\") }} as date\n        ) as quarter_start_date,\n        {# last_day does not support quarter because postgresql does not support quarter interval. #}\n        cast(\n            {{\n                dbt.dateadd(\n                    \"day\",\n                    \"-1\",\n                    dbt.dateadd(\n                        \"month\", \"3\", dbt.date_trunc(\"quarter\", \"d.date_day\")\n                    ),\n                )\n            }} as date\n        ) as quarter_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"year\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as year_number,\n        cast({{ dbt.date_trunc(\"year\", \"d.date_day\") }} as date) as year_start_date,\n        cast({{ last_day(\"d.date_day\", \"year\") }} as date) as year_end_date\n    from dates_with_prior_year_dates d\n    order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.192016, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n    {%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n    {%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n    {{ adapter.dispatch(\"convert_timezone\", \"dbt_date\")(column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1925492, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n    convert_timezone(\n        '{{ source_tz }}',\n        '{{ target_tz }}',\n        cast({{ column }} as {{ dbt.type_timestamp() }})\n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1925492, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\n    timestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1940851, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n    cast(\n        cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}'\n        as {{ dbt.type_timestamp() }}\n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1944535, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n    {{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1944535, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n    {{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1944535, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\n    from_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'), '{{ target_tz }}'\n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1944535, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast(\n        (\n            at_timezone(\n                with_timezone(\n                    cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'\n                ),\n                '{{ target_tz }}'\n            )\n        ) as {{ dbt.type_timestamp() }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1944535, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch(\"date_part\", \"dbt_date\")(datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1960874, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1960874, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1960874, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1960874, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch(\"day_name\", \"dbt_date\")(date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.197796, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n    {%- set f = \"Dy\" if short else \"Day\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.197796, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%} dayname({{ date }})\n    {%- else -%}\n        -- long version not implemented on Snowflake so we're doing it manually :/\n        case\n            dayname({{ date }})\n            when 'Mon'\n            then 'Monday'\n            when 'Tue'\n            then 'Tuesday'\n            when 'Wed'\n            then 'Wednesday'\n            when 'Thu'\n            then 'Thursday'\n            when 'Fri'\n            then 'Friday'\n            when 'Sat'\n            then 'Saturday'\n            when 'Sun'\n            then 'Sunday'\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1986651, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n    {%- set f = \"%a\" if short else \"%A\" -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1986651, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n    {# FM = Fill mode, which suppresses padding blanks #}\n    {%- set f = \"FMDy\" if short else \"FMDay\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1986651, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%} substr(dayname({{ date }}), 1, 3)\n    {%- else -%} dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.1996663, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n    {%- set f = \"E\" if short else \"EEEE\" -%} date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2001765, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n    {%- set f = \"a\" if short else \"W\" -%} date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2001765, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%} {{ dbt_date.date_part(\"day\", date) }} {%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2001765, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\n    cast({{ dbt_date.date_part(\"day\", date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2012136, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n    {{ adapter.dispatch(\"day_of_week\", \"dbt_date\")(date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2022116, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"dayofweek\", date) -%}\n\n    {%- if isoweek -%}\n        case\n            -- Shift start of week from Sunday (0) to Monday (1)\n            when {{ dow }} = 0 then 7 else {{ dow }}\n        end\n    {%- else -%} {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2022116, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = \"dayofweekiso\" -%} {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = \"dayofweek\" -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7\n            then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2034385, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"dayofweek\", date) -%}\n\n    {%- if isoweek -%}\n        case\n            -- Shift start of week from Sunday (1) to Monday (2)\n            when {{ dow }} = 1 then 7 else {{ dow }} - 1\n        end\n    {%- else -%} {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2034385, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = \"isodow\" -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = \"dow\" -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2049768, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"dayofweek\", date) -%}\n\n    {%- if isoweek -%}\n        case\n            -- Shift start of week from Sunday (0) to Monday (1)\n            when {{ dow }} = 0 then 7 else cast({{ dow }} as {{ dbt.type_bigint() }})\n        end\n    {%- else -%} cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2056696, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n    {{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2056696, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.206209, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"day_of_week\", date) -%}\n\n    {%- if isoweek -%} {{ dow }}\n    {%- else -%} case when {{ dow }} = 7 then 1 else {{ dow }} + 1 end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2067482, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n    {{ adapter.dispatch(\"day_of_year\", \"dbt_date\")(date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2069097, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part(\"dayofyear\", date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2069097, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part(\"doy\", date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2077832, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part(\"dayofyear\", date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2077832, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%} dayofyear({{ date }}) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2077832, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part(\"day_of_year\", date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2077832, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch(\"from_unixtimestamp\", \"dbt_date\")(epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2097862, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2097862, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2107835, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%} {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%} {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%} {%- set scale = 6 -%}\n    {%- else -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2107835, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%} timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%} timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%} timestamp_micros({{ epochs }})\n    {%- else -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2117834, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(\n            from_unixtime({{ epochs }}) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- elif format == \"milliseconds\" -%}\n        cast(\n            from_unixtime_nanos(\n                {{ epochs }} * pow(10, 6)\n            ) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- elif format == \"microseconds\" -%}\n        cast(\n            from_unixtime_nanos(\n                {{ epochs }} * pow(10, 3)\n            ) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- elif format == \"nanoseconds\" -%}\n        cast(\n            from_unixtime_nanos(\n                {{ epochs }}\n            ) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- else -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2130806, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2141106, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"iso_week_end\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2141106, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n    {%- set dt = dbt_date.iso_week_start(date) -%} {{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2151105, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n    {{ dbt_date._iso_week_end(date, \"isoweek\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2151105, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n    {{ dbt_date._iso_week_end(date, \"weekiso\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2151105, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"iso_week_of_year\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2161129, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\n    cast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2161129, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"isoweek\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2161129, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"weekiso\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2171109, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n    {#\n        postgresql week is isoweek, the first week of a year containing\n        January 4 of that year.\n    #}\n    {{ dbt_date._iso_week_of_year(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.21765, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n    {{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.21765, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.21765, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.21765, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"iso_week_start\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2191846, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\n    cast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2191846, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"isoweek\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2191846, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2191846, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2202191, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n    {{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2202191, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2202191, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2202191, "supported_languages": null}, "macro.dbt_date.iso_year_week": {"name": "iso_year_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_year_week.sql", "original_file_path": "macros\\calendar_date\\iso_year_week.sql", "unique_id": "macro.dbt_date.iso_year_week", "macro_sql": "\n{%- macro iso_year_week(date) -%}\n    {{ adapter.dispatch(\"iso_year_week\", \"dbt_date\")(date) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__iso_year_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2211897, "supported_languages": null}, "macro.dbt_date.default__iso_year_week": {"name": "default__iso_year_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_year_week.sql", "original_file_path": "macros\\calendar_date\\iso_year_week.sql", "unique_id": "macro.dbt_date.default__iso_year_week", "macro_sql": "{%- macro default__iso_year_week(date) -%}\n    case\n        when {{ dbt_date.iso_week_of_year(date) }} = 1\n        then\n            concat(\n                {{ dbt_date.date_part(\"year\", dbt_date.iso_week_end(date)) }},\n                '-W',\n                lpad(concat('',{{ dbt_date.iso_week_of_year(date) }}), 2, '0')\n            )\n        else\n            concat(\n                {{ dbt_date.date_part(\"year\", dbt_date.iso_week_start(date)) }},\n                '-W',\n                lpad(concat('', {{ dbt_date.iso_week_of_year(date) }}), 2, '0')\n            )\n    end\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2223017, "supported_languages": null}, "macro.dbt_date.trino__iso_year_week": {"name": "trino__iso_year_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_year_week.sql", "original_file_path": "macros\\calendar_date\\iso_year_week.sql", "unique_id": "macro.dbt_date.trino__iso_year_week", "macro_sql": "{%- macro trino__iso_year_week(date) -%}\n    case\n        when {{ dbt_date.iso_week_of_year(date) }} = 1\n        then\n            concat(\n                cast(\n                    {{ dbt_date.date_part(\"year\", dbt_date.iso_week_end(date)) }}\n                    as varchar\n                ),\n                '-W',\n                lpad(cast({{ dbt_date.iso_week_of_year(date) }} as varchar), 2, '0')\n            )\n        else\n            concat(\n                cast(\n                    {{ dbt_date.date_part(\"year\", dbt_date.iso_week_start(date)) }}\n                    as varchar\n                ),\n                '-W',\n                lpad(cast({{ dbt_date.iso_week_of_year(date) }} as varchar), 2, '0')\n            )\n    end\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2224627, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%} {{ dbt_date.n_months_ago(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2224627, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n    {{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2236671, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n    {{ dbt_date.date_part(\"month\", dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2236671, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%} {{ dbt_date.n_weeks_ago(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2236671, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch(\"month_name\", \"dbt_date\")(date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2245324, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n    {%- set f = \"MON\" if short else \"MONTH\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2245324, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n    {%- set f = \"%b\" if short else \"%B\" -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2245324, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n    {%- set f = \"MON\" if short else \"MMMM\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2262268, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n    {# FM = Fill mode, which suppresses padding blanks #}\n    {%- set f = \"FMMon\" if short else \"FMMonth\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2262268, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%} substr(monthname({{ date }}), 1, 3)\n    {%- else -%} monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2262268, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n    {%- set f = \"MMM\" if short else \"MMMM\" -%} date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2271004, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n    {%- set f = \"b\" if short else \"M\" -%} date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2276707, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%} {{ dbt_date.n_months_away(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2276707, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n    {{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2276707, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n    {{ dbt_date.date_part(\"month\", dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2276707, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%} {{ dbt_date.n_weeks_away(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2293031, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n    {{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.229455, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {%- set n = n | int -%}\n    cast({{ dbt.dateadd(\"day\", -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2303371, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n    {{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2303371, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"month\", dbt.dateadd(\"month\", -1 * n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2303371, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"month\", dbt.dateadd(\"month\", n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.231871, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"week\", dbt.dateadd(\"week\", -1 * n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2324102, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"week\", dbt.dateadd(\"week\", n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2324102, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name=\"day\", tz=None) -%}\n    {{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2324102, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2340353, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%} cast({{ dbt_date.now(tz) }} as date) {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2341754, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n    {{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2347105, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch(\"to_unixtimestamp\", \"dbt_date\")(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2348726, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part(\"epoch\", timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2348726, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part(\"epoch_seconds\", timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2357452, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2357452, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2357452, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} at time zone 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.23628, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"week_end\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2369852, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%} {{ last_day(date, \"week\") }} {%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2369852, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n    {%- set dt = dbt_date.week_start(date) -%} {{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2369852, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n    {%- set dt = dbt_date.week_start(date) -%} {{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2378492, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n    {{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2378492, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"week_of_year\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2388492, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\n    cast({{ dbt_date.date_part(\"week\", date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2388492, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n    {# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\n    cast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2388492, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\n    cast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2388492, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"week_start\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2398493, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\n    cast({{ dbt.date_trunc(\"week\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2408469, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2408469, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n    -- Sunday as week start date\n    cast(\n        {{\n            dbt.dateadd(\n                \"day\", -1, dbt.date_trunc(\"week\", dbt.dateadd(\"day\", 1, date))\n            )\n        }} as date\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2408469, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n    {{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.241854, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n    {{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.242559, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n    {#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\n    with\n        fscl_year_dates_for_periods as (\n            {{\n                dbt_date.get_fiscal_year_dates(\n                    dates, year_end_month, week_start_day, shift_year\n                )\n            }}\n        ),\n        fscl_year_w13 as (\n\n            select\n                f.*,\n                -- We count the weeks in a 13 week period\n                -- and separate the 4-5-4 week sequences\n                mod(\n                    cast((f.fiscal_week_of_year - 1) as {{ dbt.type_int() }}), 13\n                ) as w13_number,\n                -- Chop weeks into 13 week merch quarters\n                cast(\n                    least(\n                        floor((f.fiscal_week_of_year - 1) / 13.0), 3\n                    ) as {{ dbt.type_int() }}\n                ) as quarter_number\n            from fscl_year_dates_for_periods f\n\n        ),\n        fscl_periods as (\n\n            select\n                f.date_day,\n                f.fiscal_year_number,\n                f.week_start_date,\n                f.week_end_date,\n                f.fiscal_week_of_year,\n                case\n                    -- we move week 53 into the 3rd period of the quarter\n                    when f.fiscal_week_of_year = 53\n                    then 3\n                    when f.w13_number between 0 and 3\n                    then 1\n                    when f.w13_number between 4 and 8\n                    then 2\n                    when f.w13_number between 9 and 12\n                    then 3\n                end as period_of_quarter,\n                f.quarter_number\n            from fscl_year_w13 f\n\n        ),\n        fscl_periods_quarters as (\n\n            select\n                f.*,\n                cast(\n                    (\n                        (f.quarter_number * 3) + f.period_of_quarter\n                    ) as {{ dbt.type_int() }}\n                ) as fiscal_period_number\n            from fscl_periods f\n\n        )\n    select\n        date_day,\n        fiscal_year_number,\n        week_start_date,\n        week_end_date,\n        fiscal_week_of_year,\n        dense_rank() over (\n            partition by fiscal_period_number order by fiscal_week_of_year\n        ) as fiscal_week_of_period,\n        fiscal_period_number,\n        quarter_number + 1 as fiscal_quarter_number,\n        period_of_quarter as fiscal_period_of_quarter\n    from fscl_periods_quarters\n    order by 1, 2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.242559, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(\n    dates, year_end_month=12, week_start_day=1, shift_year=1\n) %}\n    {{\n        adapter.dispatch(\"get_fiscal_year_dates\", \"dbt_date\")(\n            dates, year_end_month, week_start_day, shift_year\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.244303, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(\n    dates, year_end_month, week_start_day, shift_year\n) %}\n    -- this gets all the dates within a fiscal year\n    -- determined by the given year-end-month\n    -- ending on the saturday closest to that month's end date\n    with\n        fsc_date_dimension as (select * from {{ dates }}),\n        year_month_end as (\n\n            select\n                d.year_number - {{ shift_year }} as fiscal_year_number, d.month_end_date\n            from fsc_date_dimension d\n            where d.month_of_year = {{ year_end_month }}\n            group by 1, 2\n\n        ),\n        weeks as (\n\n            select\n                d.year_number,\n                d.month_of_year,\n                d.date_day as week_start_date,\n                cast({{ dbt.dateadd(\"day\", 6, \"d.date_day\") }} as date) as week_end_date\n            from fsc_date_dimension d\n            where d.day_of_week = {{ week_start_day }}\n\n        ),\n        -- get all the weeks that start in the month the year ends\n        year_week_ends as (\n\n            select\n                d.year_number - {{ shift_year }} as fiscal_year_number, d.week_end_date\n            from weeks d\n            where d.month_of_year = {{ year_end_month }}\n            group by 1, 2\n\n        ),\n        -- then calculate which Saturday is closest to month end\n        weeks_at_month_end as (\n\n            select\n                d.fiscal_year_number,\n                d.week_end_date,\n                m.month_end_date,\n                rank() over (\n                    partition by d.fiscal_year_number\n                    order by\n                        abs(\n                            {{\n                                dbt.datediff(\n                                    \"d.week_end_date\", \"m.month_end_date\", \"day\"\n                                )\n                            }}\n                        )\n\n                ) as closest_to_month_end\n            from year_week_ends d\n            join year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n        ),\n        fiscal_year_range as (\n\n            select\n                w.fiscal_year_number,\n                cast(\n                    {{\n                        dbt.dateadd(\n                            \"day\",\n                            1,\n                            \"lag(w.week_end_date) over(order by w.week_end_date)\",\n                        )\n                    }} as date\n                ) as fiscal_year_start_date,\n                w.week_end_date as fiscal_year_end_date\n            from weeks_at_month_end w\n            where w.closest_to_month_end = 1\n\n        ),\n        fiscal_year_dates as (\n\n            select\n                d.date_day,\n                m.fiscal_year_number,\n                m.fiscal_year_start_date,\n                m.fiscal_year_end_date,\n                w.week_start_date,\n                w.week_end_date,\n                -- we reset the weeks of the year starting with the merch year start\n                -- date\n                dense_rank() over (\n                    partition by m.fiscal_year_number order by w.week_start_date\n                ) as fiscal_week_of_year\n            from fsc_date_dimension d\n            join\n                fiscal_year_range m\n                on d.date_day\n                between m.fiscal_year_start_date and m.fiscal_year_end_date\n            join weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n        )\n    select *\n    from fiscal_year_dates\n    order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2456636, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{\n        return(\n            adapter.dispatch(\"get_intervals_between\", \"dbt_date\")(\n                start_date, end_date, datepart\n            )\n        )\n    }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.245823, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement(\"get_intervals_between\", fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result(\"get_intervals_between\") -%}\n\n    {%- if value_list and value_list[\"data\"] -%}\n        {%- set values = value_list[\"data\"] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%} {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.246698, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{\n        return(\n            adapter.dispatch(\"date_spine\", \"dbt_date\")(datepart, start_date, end_date)\n        )\n    }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2477026, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n    {# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n    with\n        rawdata as (\n\n            {{\n                dbt_date.generate_series(\n                    dbt_date.get_intervals_between(start_date, end_date, datepart)\n                )\n            }}\n\n        ),\n\n        all_periods as (\n\n            select\n                (\n                    {{\n                        dbt.dateadd(\n                            datepart,\n                            \"(row_number() over (order by 1) - 1)\",\n                            start_date,\n                        )\n                    }}\n                ) as date_{{ datepart }}\n            from rawdata\n\n        ),\n\n        filtered as (\n\n            select * from all_periods where date_{{ datepart }} <= {{ end_date }}\n\n        )\n\n    select *\n    from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2482374, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch(\"get_powers_of_two\", \"dbt_date\")(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2482374, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n        {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n        {% if upper_bound <= 2**loop.index %} {{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2497718, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch(\"generate_series\", \"dbt_date\")(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2497718, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with\n        p as (\n            select 0 as generated_number\n            union all\n            select 1\n        ),\n        unioned as (\n\n            select\n\n                {% for i in range(n) %}\n                    p{{ i }}.generated_number * power(2, {{ i }})\n                    {% if not loop.last %} + {% endif %}\n                {% endfor %}\n                + 1 as generated_number\n\n            from\n\n            {% for i in range(n) %}\n                    p as p{{ i }} {% if not loop.last %} cross join {% endif %}\n            {% endfor %}\n\n        )\n\n    select *\n    from unioned\n    where generated_number <= {{ upper_bound }}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2508066, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2508066, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(\n    year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None\n) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{\n        return(\n            modules.datetime.datetime(\n                year=year,\n                month=month,\n                day=day,\n                hour=hour,\n                minute=minute,\n                second=second,\n                microsecond=microsecond,\n                tzinfo=modules.pytz.timezone(tz),\n            )\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2518067, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2518067, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2518067, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2535706, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2535706, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2535706, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2546043, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2547667, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.255639, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.255639, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.256178, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2567124, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2568727, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2568727, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2568727, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2568727, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2568727, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2568727, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2593827, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2593827, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2603836, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2613542, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2623825, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2623825, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2634623, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2636025, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2646332, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2656336, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2656336, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2671673, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2682025, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2688978, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.269773, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2707722, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2724638, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.273464, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.274493, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2760267, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2770622, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.278065, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2790656, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2806072, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2816093, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2829018, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2837121, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2847812, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2856402, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2856402, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.287339, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None,\n                                                   step=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (\n            (value_field {{ operator }} value_field_lag)\n            {%- if step %}\n            and ((value_field_lag - value_field) = {{ step }})\n            {%- endif %}\n        )\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.289215, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None,\n                                                   step=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (\n            (value_field {{ operator }} value_field_lag)\n            {%- if step %}\n            and ((value_field - value_field_lag) = {{ step }})\n            {%- endif %}\n        )\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2902167, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2927585, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2940257, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2949235, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2949235, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2949235, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2959578, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.297441, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.297978, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.2995577, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3000925, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.303268, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.303268, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3049645, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3104107, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3114102, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3124878, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.313945, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3159792, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3175218, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3175218, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.32009, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3210905, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3228467, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3235152, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.324416, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3259516, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3269868, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3279858, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3296962, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3305569, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3315566, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.332091, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3326225, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3354084, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.336977, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3380115, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3390117, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3405473, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3420818, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.343777, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3450012, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3460026, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3479943, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.348861, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.348861, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.349863, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3511074, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3521075, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3521075, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3532789, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3532789, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.354931, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3563023, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3568094, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3578176, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3588173, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3588173, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3603246, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3625162, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3635192, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.365519, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.365519, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.367026, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3680344, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3680344, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3695426, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3695426, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3705506, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3705506, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3705506, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3705506, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3715506, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3715506, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3715506, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3715506, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3715506, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3715506, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.372611, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3727064, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3727064, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.373387, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.373387, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3742566, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3742566, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3742566, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3752565, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3762565, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3767653, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3777728, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3794596, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3794596, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3819172, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3890994, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3900995, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3910997, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3926077, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3926077, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3936145, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3957794, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.3966498, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.399798, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4003062, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.401314, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.401314, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4030197, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4030197, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.404023, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.404023, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4056664, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4070473, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.408055, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4090548, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.410055, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.411055, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4120548, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.413195, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4141982, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4141982, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4151983, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4151983, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4151983, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4168591, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4168591, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.417713, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.41886, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4197881, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4207883, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4222953, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4224598, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.423303, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4238117, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4248192, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4248192, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4248192, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4248192, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4248192, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4263844, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4263844, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4273343, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4273343, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.428334, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.429844, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4308524, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.431852, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4345925, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4357579, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.436901, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.436901, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4377723, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4387722, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4407718, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.441772, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4422805, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4439223, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4449267, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4459589, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.447289, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4478254, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4499063, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4499063, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4509385, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.451941, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.451941, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.451941, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.453027, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.45319, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.45319, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.453946, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4545815, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4545815, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4565566, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4574268, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4584584, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4584584, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4595082, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.460042, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4610763, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4631433, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4633079, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.464338, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.464338, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4653387, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4653387, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4668722, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.467909, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.469979, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4710133, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4710133, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4732726, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.479408, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4804428, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4837663, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4845457, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4850838, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4857972, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4857972, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4871879, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4871879, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.488223, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.488223, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1748873073.4892223, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.velux.stg_accuweather_hourly": ["source.velux.accuweather.TOP_CITY_HOURLY_METRIC"], "model.velux.stg_iot_data": ["source.velux.iot_data.iot_data"], "test.velux.not_null_stg_accuweather_hourly_weather_timestamp.70cb22ff57": ["model.velux.stg_accuweather_hourly"], "test.velux.not_null_stg_accuweather_hourly_city_name.20318c53f2": ["model.velux.stg_accuweather_hourly"], "test.velux.not_null_stg_accuweather_hourly_country_code.fc4c53b85d": ["model.velux.stg_accuweather_hourly"], "test.velux.dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code.1e0eb90a13": ["model.velux.stg_accuweather_hourly"], "test.velux.not_null_stg_iot_data_event_timestamp.f9de5c6aa7": ["model.velux.stg_iot_data"], "test.velux.not_null_stg_iot_data_country.8a419ce412": ["model.velux.stg_iot_data"], "test.velux.not_null_stg_iot_data_city.ec8f0b979f": ["model.velux.stg_iot_data"], "test.velux.not_null_stg_iot_data_device_id.7a15007b23": ["model.velux.stg_iot_data"], "test.velux.dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id.e52fe9fcb8": ["model.velux.stg_iot_data"], "model.velux.int_iot_data_with_weather": ["model.velux.int_iot_data_unpivotted", "model.velux.stg_accuweather_hourly"], "model.velux.int_iot_data_unpivotted": ["model.velux.stg_iot_data"], "test.velux.not_null_int_iot_data_with_weather_event_timestamp.3f98ff7746": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_with_weather_country.25a8549049": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_with_weather_city.6b64d45411": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_with_weather_device_id.aa61cfac82": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_with_weather_room.514eb700a8": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_with_weather_sensor_type.05578b68ad": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_with_weather_sensor_value.6e05d41e5b": ["model.velux.int_iot_data_with_weather"], "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type.c1e221b8b2": ["model.velux.int_iot_data_with_weather"], "test.velux.not_null_int_iot_data_unpivotted_event_timestamp.ba8cd711d9": ["model.velux.int_iot_data_unpivotted"], "test.velux.not_null_int_iot_data_unpivotted_country.903cdf6125": ["model.velux.int_iot_data_unpivotted"], "test.velux.not_null_int_iot_data_unpivotted_city.e089e346c0": ["model.velux.int_iot_data_unpivotted"], "test.velux.not_null_int_iot_data_unpivotted_device_id.522d828ef9": ["model.velux.int_iot_data_unpivotted"], "test.velux.not_null_int_iot_data_unpivotted_room.81de36354d": ["model.velux.int_iot_data_unpivotted"], "test.velux.not_null_int_iot_data_unpivotted_sensor_type.8f4d539301": ["model.velux.int_iot_data_unpivotted"], "test.velux.not_null_int_iot_data_unpivotted_sensor_value.35de21c6e5": ["model.velux.int_iot_data_unpivotted"], "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type.e3b5c1add3": ["model.velux.int_iot_data_unpivotted"], "model.velux.dim_time": ["model.velux.int_iot_data_with_weather"], "model.velux.dim_locations": ["model.velux.int_iot_data_with_weather"], "model.velux.dim_sensors": ["model.velux.int_iot_data_with_weather"], "test.velux.unique_dim_time_time_id.0752c025e8": ["model.velux.dim_time"], "test.velux.not_null_dim_time_time_id.6bb481dd5c": ["model.velux.dim_time"], "test.velux.not_null_dim_time_event_date.15d19b444b": ["model.velux.dim_time"], "test.velux.not_null_dim_time_event_timestamp.55d25feabe": ["model.velux.dim_time"], "test.velux.not_null_dim_time_hour_of_day.6e43b14138": ["model.velux.dim_time"], "test.velux.not_null_dim_time_day_of_week.296786d878": ["model.velux.dim_time"], "test.velux.not_null_dim_time_day_of_month.2366c8be4e": ["model.velux.dim_time"], "test.velux.not_null_dim_time_month_number.717cfb859a": ["model.velux.dim_time"], "test.velux.not_null_dim_time_year_number.780092878e": ["model.velux.dim_time"], "test.velux.not_null_dim_time_is_weekend.f294374ebd": ["model.velux.dim_time"], "test.velux.not_null_dim_time_season.cefce22d00": ["model.velux.dim_time"], "test.velux.not_null_dim_time_day_name.a2e1929d4a": ["model.velux.dim_time"], "test.velux.not_null_dim_time_month_name.5b491402b4": ["model.velux.dim_time"], "test.velux.unique_dim_locations_location_id.09f471618d": ["model.velux.dim_locations"], "test.velux.not_null_dim_locations_location_id.70b6875476": ["model.velux.dim_locations"], "test.velux.not_null_dim_locations_city.1544cc8256": ["model.velux.dim_locations"], "test.velux.not_null_dim_locations_country.18b7d518a6": ["model.velux.dim_locations"], "test.velux.unique_dim_sensors_sensor_id.afa6d3dbaa": ["model.velux.dim_sensors"], "test.velux.not_null_dim_sensors_sensor_id.d39dd3c588": ["model.velux.dim_sensors"], "test.velux.not_null_dim_sensors_device_id.e4990890b6": ["model.velux.dim_sensors"], "test.velux.not_null_dim_sensors_room.b001c8477c": ["model.velux.dim_sensors"], "test.velux.not_null_dim_sensors_sensor_type.2e1ff9e6c0": ["model.velux.dim_sensors"], "test.velux.not_null_dim_sensors_measurement_unit.85ac41ebba": ["model.velux.dim_sensors"], "model.velux.fct_readings": ["model.velux.dim_locations", "model.velux.dim_sensors", "model.velux.dim_time", "model.velux.int_iot_data_with_weather"], "test.velux.unique_fct_readings_reading_id.47dfa598e0": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_reading_id.6386d0ff8f": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR.7b231376d8": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_time_id.8fa755a9e5": ["model.velux.fct_readings"], "test.velux.relationships_fct_readings_time_id__time_id__ref_dim_time_.80896ba915": ["model.velux.dim_time", "model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR.d71e6abfa8": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_location_id.867f987594": ["model.velux.fct_readings"], "test.velux.relationships_fct_readings_location_id__location_id__ref_dim_locations_.54dcf3ae94": ["model.velux.dim_locations", "model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR.ac9b14772f": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_sensor_id.7a06207ecb": ["model.velux.fct_readings"], "test.velux.relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_.81497e9c69": ["model.velux.dim_sensors", "model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR.5c4002ac9d": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_device_id.a77b43db47": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR.92eda883f4": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_event_timestamp.86f13a196e": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ.6df7cc191e": ["model.velux.fct_readings"], "test.velux.not_null_fct_readings_event_date.d668f3581d": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE.e6d232b18a": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT.f1516b42ea": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100.f12c40e6cf": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70.28b8e524c0": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT.0397324e2b": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70.557f2c7b49": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT.316cc723d6": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT.698652548a": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0.46d2317f7e": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT.3884e931ef": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0.203f85dd55": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT.5a3f2af483": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0.c43262e12f": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT.4033c0965f": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0.5d4f1577f0": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT.5a59f008a6": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0.cb891d1321": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT.e409ed115c": ["model.velux.fct_readings"], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR.ef907bd31d": ["model.velux.fct_readings"], "source.velux.accuweather.TOP_CITY_HOURLY_METRIC": [], "source.velux.iot_data.iot_data": []}, "child_map": {"model.velux.stg_accuweather_hourly": ["model.velux.int_iot_data_with_weather", "test.velux.dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code.1e0eb90a13", "test.velux.not_null_stg_accuweather_hourly_city_name.20318c53f2", "test.velux.not_null_stg_accuweather_hourly_country_code.fc4c53b85d", "test.velux.not_null_stg_accuweather_hourly_weather_timestamp.70cb22ff57"], "model.velux.stg_iot_data": ["model.velux.int_iot_data_unpivotted", "test.velux.dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id.e52fe9fcb8", "test.velux.not_null_stg_iot_data_city.ec8f0b979f", "test.velux.not_null_stg_iot_data_country.8a419ce412", "test.velux.not_null_stg_iot_data_device_id.7a15007b23", "test.velux.not_null_stg_iot_data_event_timestamp.f9de5c6aa7"], "test.velux.not_null_stg_accuweather_hourly_weather_timestamp.70cb22ff57": [], "test.velux.not_null_stg_accuweather_hourly_city_name.20318c53f2": [], "test.velux.not_null_stg_accuweather_hourly_country_code.fc4c53b85d": [], "test.velux.dbt_utils_unique_combination_of_columns_stg_accuweather_hourly_weather_timestamp__city_name__country_code.1e0eb90a13": [], "test.velux.not_null_stg_iot_data_event_timestamp.f9de5c6aa7": [], "test.velux.not_null_stg_iot_data_country.8a419ce412": [], "test.velux.not_null_stg_iot_data_city.ec8f0b979f": [], "test.velux.not_null_stg_iot_data_device_id.7a15007b23": [], "test.velux.dbt_utils_unique_combination_of_columns_stg_iot_data_event_timestamp__device_id.e52fe9fcb8": [], "model.velux.int_iot_data_with_weather": ["model.velux.dim_locations", "model.velux.dim_sensors", "model.velux.dim_time", "model.velux.fct_readings", "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type.c1e221b8b2", "test.velux.not_null_int_iot_data_with_weather_city.6b64d45411", "test.velux.not_null_int_iot_data_with_weather_country.25a8549049", "test.velux.not_null_int_iot_data_with_weather_device_id.aa61cfac82", "test.velux.not_null_int_iot_data_with_weather_event_timestamp.3f98ff7746", "test.velux.not_null_int_iot_data_with_weather_room.514eb700a8", "test.velux.not_null_int_iot_data_with_weather_sensor_type.05578b68ad", "test.velux.not_null_int_iot_data_with_weather_sensor_value.6e05d41e5b"], "model.velux.int_iot_data_unpivotted": ["model.velux.int_iot_data_with_weather", "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type.e3b5c1add3", "test.velux.not_null_int_iot_data_unpivotted_city.e089e346c0", "test.velux.not_null_int_iot_data_unpivotted_country.903cdf6125", "test.velux.not_null_int_iot_data_unpivotted_device_id.522d828ef9", "test.velux.not_null_int_iot_data_unpivotted_event_timestamp.ba8cd711d9", "test.velux.not_null_int_iot_data_unpivotted_room.81de36354d", "test.velux.not_null_int_iot_data_unpivotted_sensor_type.8f4d539301", "test.velux.not_null_int_iot_data_unpivotted_sensor_value.35de21c6e5"], "test.velux.not_null_int_iot_data_with_weather_event_timestamp.3f98ff7746": [], "test.velux.not_null_int_iot_data_with_weather_country.25a8549049": [], "test.velux.not_null_int_iot_data_with_weather_city.6b64d45411": [], "test.velux.not_null_int_iot_data_with_weather_device_id.aa61cfac82": [], "test.velux.not_null_int_iot_data_with_weather_room.514eb700a8": [], "test.velux.not_null_int_iot_data_with_weather_sensor_type.05578b68ad": [], "test.velux.not_null_int_iot_data_with_weather_sensor_value.6e05d41e5b": [], "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_with_weather_event_timestamp__device_id__room__sensor_type.c1e221b8b2": [], "test.velux.not_null_int_iot_data_unpivotted_event_timestamp.ba8cd711d9": [], "test.velux.not_null_int_iot_data_unpivotted_country.903cdf6125": [], "test.velux.not_null_int_iot_data_unpivotted_city.e089e346c0": [], "test.velux.not_null_int_iot_data_unpivotted_device_id.522d828ef9": [], "test.velux.not_null_int_iot_data_unpivotted_room.81de36354d": [], "test.velux.not_null_int_iot_data_unpivotted_sensor_type.8f4d539301": [], "test.velux.not_null_int_iot_data_unpivotted_sensor_value.35de21c6e5": [], "test.velux.dbt_utils_unique_combination_of_columns_int_iot_data_unpivotted_event_timestamp__device_id__room__sensor_type.e3b5c1add3": [], "model.velux.dim_time": ["model.velux.fct_readings", "test.velux.not_null_dim_time_day_name.a2e1929d4a", "test.velux.not_null_dim_time_day_of_month.2366c8be4e", "test.velux.not_null_dim_time_day_of_week.296786d878", "test.velux.not_null_dim_time_event_date.15d19b444b", "test.velux.not_null_dim_time_event_timestamp.55d25feabe", "test.velux.not_null_dim_time_hour_of_day.6e43b14138", "test.velux.not_null_dim_time_is_weekend.f294374ebd", "test.velux.not_null_dim_time_month_name.5b491402b4", "test.velux.not_null_dim_time_month_number.717cfb859a", "test.velux.not_null_dim_time_season.cefce22d00", "test.velux.not_null_dim_time_time_id.6bb481dd5c", "test.velux.not_null_dim_time_year_number.780092878e", "test.velux.relationships_fct_readings_time_id__time_id__ref_dim_time_.80896ba915", "test.velux.unique_dim_time_time_id.0752c025e8"], "model.velux.dim_locations": ["model.velux.fct_readings", "test.velux.not_null_dim_locations_city.1544cc8256", "test.velux.not_null_dim_locations_country.18b7d518a6", "test.velux.not_null_dim_locations_location_id.70b6875476", "test.velux.relationships_fct_readings_location_id__location_id__ref_dim_locations_.54dcf3ae94", "test.velux.unique_dim_locations_location_id.09f471618d"], "model.velux.dim_sensors": ["model.velux.fct_readings", "test.velux.not_null_dim_sensors_device_id.e4990890b6", "test.velux.not_null_dim_sensors_measurement_unit.85ac41ebba", "test.velux.not_null_dim_sensors_room.b001c8477c", "test.velux.not_null_dim_sensors_sensor_id.d39dd3c588", "test.velux.not_null_dim_sensors_sensor_type.2e1ff9e6c0", "test.velux.relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_.81497e9c69", "test.velux.unique_dim_sensors_sensor_id.afa6d3dbaa"], "test.velux.unique_dim_time_time_id.0752c025e8": [], "test.velux.not_null_dim_time_time_id.6bb481dd5c": [], "test.velux.not_null_dim_time_event_date.15d19b444b": [], "test.velux.not_null_dim_time_event_timestamp.55d25feabe": [], "test.velux.not_null_dim_time_hour_of_day.6e43b14138": [], "test.velux.not_null_dim_time_day_of_week.296786d878": [], "test.velux.not_null_dim_time_day_of_month.2366c8be4e": [], "test.velux.not_null_dim_time_month_number.717cfb859a": [], "test.velux.not_null_dim_time_year_number.780092878e": [], "test.velux.not_null_dim_time_is_weekend.f294374ebd": [], "test.velux.not_null_dim_time_season.cefce22d00": [], "test.velux.not_null_dim_time_day_name.a2e1929d4a": [], "test.velux.not_null_dim_time_month_name.5b491402b4": [], "test.velux.unique_dim_locations_location_id.09f471618d": [], "test.velux.not_null_dim_locations_location_id.70b6875476": [], "test.velux.not_null_dim_locations_city.1544cc8256": [], "test.velux.not_null_dim_locations_country.18b7d518a6": [], "test.velux.unique_dim_sensors_sensor_id.afa6d3dbaa": [], "test.velux.not_null_dim_sensors_sensor_id.d39dd3c588": [], "test.velux.not_null_dim_sensors_device_id.e4990890b6": [], "test.velux.not_null_dim_sensors_room.b001c8477c": [], "test.velux.not_null_dim_sensors_sensor_type.2e1ff9e6c0": [], "test.velux.not_null_dim_sensors_measurement_unit.85ac41ebba": [], "model.velux.fct_readings": ["test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70.557f2c7b49", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70.28b8e524c0", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100.f12c40e6cf", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0.c43262e12f", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0.cb891d1321", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0.5d4f1577f0", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0.203f85dd55", "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0.46d2317f7e", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR.92eda883f4", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT.316cc723d6", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE.e6d232b18a", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ.6df7cc191e", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR.ac9b14772f", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT.698652548a", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT.0397324e2b", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR.ef907bd31d", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR.7b231376d8", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR.5c4002ac9d", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT.f1516b42ea", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT.4033c0965f", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT.e409ed115c", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR.d71e6abfa8", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT.5a59f008a6", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT.5a3f2af483", "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT.3884e931ef", "test.velux.not_null_fct_readings_device_id.a77b43db47", "test.velux.not_null_fct_readings_event_date.d668f3581d", "test.velux.not_null_fct_readings_event_timestamp.86f13a196e", "test.velux.not_null_fct_readings_location_id.867f987594", "test.velux.not_null_fct_readings_reading_id.6386d0ff8f", "test.velux.not_null_fct_readings_sensor_id.7a06207ecb", "test.velux.not_null_fct_readings_time_id.8fa755a9e5", "test.velux.relationships_fct_readings_location_id__location_id__ref_dim_locations_.54dcf3ae94", "test.velux.relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_.81497e9c69", "test.velux.relationships_fct_readings_time_id__time_id__ref_dim_time_.80896ba915", "test.velux.unique_fct_readings_reading_id.47dfa598e0"], "test.velux.unique_fct_readings_reading_id.47dfa598e0": [], "test.velux.not_null_fct_readings_reading_id.6386d0ff8f": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_reading_id__VARCHAR.7b231376d8": [], "test.velux.not_null_fct_readings_time_id.8fa755a9e5": [], "test.velux.relationships_fct_readings_time_id__time_id__ref_dim_time_.80896ba915": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_time_id__VARCHAR.d71e6abfa8": [], "test.velux.not_null_fct_readings_location_id.867f987594": [], "test.velux.relationships_fct_readings_location_id__location_id__ref_dim_locations_.54dcf3ae94": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_location_id__VARCHAR.ac9b14772f": [], "test.velux.not_null_fct_readings_sensor_id.7a06207ecb": [], "test.velux.relationships_fct_readings_sensor_id__sensor_id__ref_dim_sensors_.81497e9c69": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_id__VARCHAR.5c4002ac9d": [], "test.velux.not_null_fct_readings_device_id.a77b43db47": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_device_id__VARCHAR.92eda883f4": [], "test.velux.not_null_fct_readings_event_timestamp.86f13a196e": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_timestamp__TIMESTAMP_NTZ.6df7cc191e": [], "test.velux.not_null_fct_readings_event_date.d668f3581d": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_event_date__DATE.e6d232b18a": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sensor_value__FLOAT.f1516b42ea": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sensor_value__10000___100.f12c40e6cf": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_outdoor_temperature_celsius__70___70.28b8e524c0": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_outdoor_temperature_celsius__FLOAT.0397324e2b": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_dew_point_temperature_celsius__70___70.557f2c7b49": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_dew_point_temperature_celsius__FLOAT.316cc723d6": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_mean_sea_level_pressure_hpa__FLOAT.698652548a": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_wind_speed_ms__100__0.46d2317f7e": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_wind_speed_ms__FLOAT.3884e931ef": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_visibility_km__200__0.203f85dd55": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_visibility_km__FLOAT.5a3f2af483": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_solar_irradiance_w_m2__2000__0.c43262e12f": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_solar_irradiance_w_m2__FLOAT.4033c0965f": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_uv_index__15__0.5d4f1577f0": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_uv_index__FLOAT.5a59f008a6": [], "test.velux.dbt_expectations_expect_column_values_to_be_between_fct_readings_sunshine_duration_minutes__1440__0.cb891d1321": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_sunshine_duration_minutes__FLOAT.e409ed115c": [], "test.velux.dbt_expectations_expect_column_values_to_be_of_type_fct_readings_precipitation_type_description__VARCHAR.ef907bd31d": [], "source.velux.accuweather.TOP_CITY_HOURLY_METRIC": ["model.velux.stg_accuweather_hourly"], "source.velux.iot_data.iot_data": ["model.velux.stg_iot_data"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}